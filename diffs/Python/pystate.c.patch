diff --git a/Python/pystate.c b/Python/pystate.c
--- a/Python/pystate.c
+++ b/Python/pystate.c
@@ -146,6 +146,9 @@ PyInterpreterState_Delete(PyInterpreterS
     }
     if (interp->tstate_head != NULL)
         Py_FatalError("PyInterpreterState_Delete: remaining threads");
+#ifdef WITH_PARALLEL
+    _PyParallel_DeletingInterpreterState(interp);
+#endif
     *p = interp->next;
     HEAD_UNLOCK();
     free(interp);
@@ -173,6 +176,15 @@ new_threadstate(PyInterpreterState *inte
     if (_PyThreadState_GetFrame == NULL)
         _PyThreadState_GetFrame = threadstate_getframe;
 
+#ifdef WITH_PARALLEL
+    if (tstate != NULL) {
+        if (!_PyParallel_CreatedNewThreadState(tstate)) {
+            free(tstate);
+            tstate = NULL;
+        }
+    }
+#endif
+
     if (tstate != NULL) {
         tstate->interp = interp;
 
@@ -239,6 +251,10 @@ void
 #ifdef WITH_THREAD
     _PyGILState_NoteThreadState(tstate);
 #endif
+#ifdef WITH_PARALLEL
+    _PyParallel_InitializedThreadState(tstate);
+#endif
+
 }
 
 PyObject*
@@ -324,6 +340,10 @@ PyThreadState_Clear(PyThreadState *tstat
         fprintf(stderr,
           "PyThreadState_Clear: warning: thread still has a frame\n");
 
+#ifdef WITH_PARALLEL
+    _PyParallel_ClearingThreadState(tstate);
+#endif
+
     Py_CLEAR(tstate->frame);
 
     Py_CLEAR(tstate->dict);
@@ -356,6 +376,9 @@ tstate_delete_common(PyThreadState *tsta
     interp = tstate->interp;
     if (interp == NULL)
         Py_FatalError("PyThreadState_Delete: NULL interp");
+#ifdef WITH_PARALLEL
+    _PyParallel_DeletingThreadState(tstate);
+#endif
     HEAD_LOCK();
     for (p = &interp->tstate_head; ; p = &(*p)->next) {
         if (*p == NULL)
@@ -417,20 +440,36 @@ PyThreadState_DeleteCurrent()
 PyThreadState *
 PyThreadState_Get(void)
 {
-    PyThreadState *tstate = (PyThreadState*)_Py_atomic_load_relaxed(
-        &_PyThreadState_Current);
+    PyThreadState *tstate = _PyThreadState_XGET();
     if (tstate == NULL)
         Py_FatalError("PyThreadState_Get: no current thread");
 
     return tstate;
 }
 
+PyThreadState *
+PyThreadState_XGet(void)
+{
+    return _PyThreadState_XGET();
+}
 
 PyThreadState *
 PyThreadState_Swap(PyThreadState *newts)
 {
     PyThreadState *oldts = (PyThreadState*)_Py_atomic_load_relaxed(
         &_PyThreadState_Current);
+#if defined(WITH_PARALLEL) && defined(Py_DEBUG) && 0
+    /* Make sure oldts and newts aren't parallel.
+       (xxx: disabled; was causing crashes during Py_Finalize())
+     */
+
+    if (oldts) {
+        assert(oldts->is_parallel_thread == 0);
+        assert(oldts->thread_id == _Py_get_current_thread_id());
+    }
+    if (newts)
+        assert(newts->is_parallel_thread == 0);
+#endif
 
     _Py_atomic_store_relaxed(&_PyThreadState_Current, newts);
     /* It should not be possible for more than one thread state
@@ -461,14 +500,15 @@ PyThreadState_Swap(PyThreadState *newts)
 PyObject *
 PyThreadState_GetDict(void)
 {
-    PyThreadState *tstate = (PyThreadState*)_Py_atomic_load_relaxed(
-        &_PyThreadState_Current);
+    PyThreadState *tstate = PyThreadState_XGET();
     if (tstate == NULL)
         return NULL;
 
     if (tstate->dict == NULL) {
         PyObject *d;
+        PyPx_EnableTLSHeap();
         tstate->dict = d = PyDict_New();
+        PyPx_DisableTLSHeap();
         if (d == NULL)
             PyErr_Clear();
     }
