diff --git a/Python/pystate.c b/Python/pystate.c
--- a/Python/pystate.c
+++ b/Python/pystate.c
@@ -146,6 +146,9 @@ PyInterpreterState_Delete(PyInterpreterS
     }
     if (interp->tstate_head != NULL)
         Py_FatalError("PyInterpreterState_Delete: remaining threads");
+#ifdef WITH_PARALLEL
+    _PyParallel_DeletingInterpreterState(interp);
+#endif
     *p = interp->next;
     HEAD_UNLOCK();
     free(interp);
@@ -168,46 +171,18 @@ threadstate_getframe(PyThreadState *self
 static PyThreadState *
 new_threadstate(PyInterpreterState *interp, int init)
 {
-    PyThreadState *tstate = (PyThreadState *)malloc(sizeof(PyThreadState));
+    PyThreadState *tstate;
+    Py_GUARD();
+    tstate = (PyThreadState *)malloc(sizeof(PyThreadState));
 
     if (_PyThreadState_GetFrame == NULL)
         _PyThreadState_GetFrame = threadstate_getframe;
 
     if (tstate != NULL) {
+        memset(tstate, 0, sizeof(PyThreadState));
+
         tstate->interp = interp;
-
-        tstate->frame = NULL;
-        tstate->recursion_depth = 0;
-        tstate->overflowed = 0;
-        tstate->recursion_critical = 0;
-        tstate->tracing = 0;
-        tstate->use_tracing = 0;
-        tstate->tick_counter = 0;
-        tstate->gilstate_counter = 0;
-        tstate->async_exc = NULL;
-#ifdef WITH_THREAD
         tstate->thread_id = PyThread_get_thread_ident();
-#else
-        tstate->thread_id = 0;
-#endif
-
-        tstate->dict = NULL;
-
-        tstate->curexc_type = NULL;
-        tstate->curexc_value = NULL;
-        tstate->curexc_traceback = NULL;
-
-        tstate->exc_type = NULL;
-        tstate->exc_value = NULL;
-        tstate->exc_traceback = NULL;
-
-        tstate->c_profilefunc = NULL;
-        tstate->c_tracefunc = NULL;
-        tstate->c_profileobj = NULL;
-        tstate->c_traceobj = NULL;
-
-        tstate->trash_delete_nesting = 0;
-        tstate->trash_delete_later = NULL;
 
         if (init)
             _PyThreadState_Init(tstate);
@@ -239,6 +214,10 @@ void
 #ifdef WITH_THREAD
     _PyGILState_NoteThreadState(tstate);
 #endif
+#ifdef WITH_PARALLEL
+    _PyParallel_InitializedThreadState(tstate);
+#endif
+
 }
 
 PyObject*
@@ -324,6 +303,10 @@ PyThreadState_Clear(PyThreadState *tstat
         fprintf(stderr,
           "PyThreadState_Clear: warning: thread still has a frame\n");
 
+#ifdef WITH_PARALLEL
+    _PyParallel_ClearingThreadState(tstate);
+#endif
+
     Py_CLEAR(tstate->frame);
 
     Py_CLEAR(tstate->dict);
@@ -356,6 +339,9 @@ tstate_delete_common(PyThreadState *tsta
     interp = tstate->interp;
     if (interp == NULL)
         Py_FatalError("PyThreadState_Delete: NULL interp");
+#ifdef WITH_PARALLEL
+    _PyParallel_DeletingThreadState(tstate);
+#endif
     HEAD_LOCK();
     for (p = &interp->tstate_head; ; p = &(*p)->next) {
         if (*p == NULL)
@@ -417,20 +403,36 @@ PyThreadState_DeleteCurrent()
 PyThreadState *
 PyThreadState_Get(void)
 {
-    PyThreadState *tstate = (PyThreadState*)_Py_atomic_load_relaxed(
-        &_PyThreadState_Current);
+    PyThreadState *tstate = _PyThreadState_XGET();
     if (tstate == NULL)
         Py_FatalError("PyThreadState_Get: no current thread");
 
     return tstate;
 }
 
+PyThreadState *
+PyThreadState_XGet(void)
+{
+    return _PyThreadState_XGET();
+}
 
 PyThreadState *
 PyThreadState_Swap(PyThreadState *newts)
 {
     PyThreadState *oldts = (PyThreadState*)_Py_atomic_load_relaxed(
         &_PyThreadState_Current);
+#if defined(WITH_PARALLEL) && defined(Py_DEBUG) && 0
+    /* Make sure oldts and newts aren't parallel.
+       (xxx: disabled; was causing crashes during Py_Finalize())
+     */
+
+    if (oldts) {
+        assert(oldts->is_parallel_thread == 0);
+        assert(oldts->thread_id == _Py_get_current_thread_id());
+    }
+    if (newts)
+        assert(newts->is_parallel_thread == 0);
+#endif
 
     _Py_atomic_store_relaxed(&_PyThreadState_Current, newts);
     /* It should not be possible for more than one thread state
@@ -461,14 +463,18 @@ PyThreadState_Swap(PyThreadState *newts)
 PyObject *
 PyThreadState_GetDict(void)
 {
-    PyThreadState *tstate = (PyThreadState*)_Py_atomic_load_relaxed(
-        &_PyThreadState_Current);
+    PyThreadState *tstate;
+    /* XXX: This needs to be reviewed for PyParallel. */   
+
+    tstate = PyThreadState_XGET();
     if (tstate == NULL)
         return NULL;
 
     if (tstate->dict == NULL) {
         PyObject *d;
+        PyPx_EnableTLSHeap();
         tstate->dict = d = PyDict_New();
+        PyPx_DisableTLSHeap();
         if (d == NULL)
             PyErr_Clear();
     }
@@ -606,6 +612,7 @@ PyObject *
 static int
 PyThreadState_IsCurrent(PyThreadState *tstate)
 {
+    Px_RETURN(1);
     /* Must be the tstate for this thread */
     assert(PyGILState_GetThisThreadState()==tstate);
     return tstate == _Py_atomic_load_relaxed(&_PyThreadState_Current);
@@ -617,6 +624,7 @@ PyThreadState_IsCurrent(PyThreadState *t
 void
 _PyGILState_Init(PyInterpreterState *i, PyThreadState *t)
 {
+    Px_VOID();
     assert(i && t); /* must init with valid states */
     autoTLSkey = PyThread_create_key();
     if (autoTLSkey == -1)
@@ -631,6 +639,7 @@ void
 void
 _PyGILState_Fini(void)
 {
+    Px_VOID();
     PyThread_delete_key(autoTLSkey);
     autoInterpreterState = NULL;
 }
@@ -642,7 +651,9 @@ void
 void
 _PyGILState_Reinit(void)
 {
-    PyThreadState *tstate = PyGILState_GetThisThreadState();
+    PyThreadState *tstate;
+    Px_VOID();
+    tstate = PyGILState_GetThisThreadState();
     PyThread_delete_key(autoTLSkey);
     if ((autoTLSkey = PyThread_create_key()) == -1)
         Py_FatalError("Could not allocate TLS entry");
@@ -661,6 +672,9 @@ void
 static void
 _PyGILState_NoteThreadState(PyThreadState* tstate)
 {
+    if (_PyParallel_GetActiveContext())
+        return;
+
     /* If autoTLSkey isn't initialized, this must be the very first
        threadstate created in Py_Initialize().  Don't do anything for now
        (we'll be back here when _PyGILState_Init is called). */
@@ -692,6 +706,9 @@ static void
 PyThreadState *
 PyGILState_GetThisThreadState(void)
 {
+    if (_PyParallel_GetActiveContext())
+        return _PyParallel_GetThreadState();
+
     if (autoInterpreterState == NULL)
         return NULL;
     return (PyThreadState *)PyThread_get_key_value(autoTLSkey);
@@ -702,6 +719,9 @@ PyGILState_Ensure(void)
 {
     int current;
     PyThreadState *tcur;
+    if (_PyParallel_GetActiveContext())
+        return PyGILState_LOCKED;
+
     /* Note that we do not auto-init Python here - apart from
        potential races with 2 threads auto-initializing, pep-311
        spells out other issues.  Embedders are expected to have
@@ -735,8 +755,10 @@ PyGILState_Ensure(void)
 void
 PyGILState_Release(PyGILState_STATE oldstate)
 {
-    PyThreadState *tcur = (PyThreadState *)PyThread_get_key_value(
-                                                            autoTLSkey);
+    PyThreadState *tcur;
+    if (_PyParallel_GetActiveContext())
+        return;
+    tcur = (PyThreadState *)PyThread_get_key_value(autoTLSkey);
     if (tcur == NULL)
         Py_FatalError("auto-releasing thread-state, "
                       "but no thread-state for this thread");
