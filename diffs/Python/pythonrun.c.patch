diff --git a/Python/pythonrun.c b/Python/pythonrun.c
index 91d56b7..47c92a9 100644
--- a/Python/pythonrun.c
+++ b/Python/pythonrun.c
@@ -251,6 +250,10 @@ _Py_InitializeEx_Private(int install_sigs, int install_importlib)
     PyInterpreterState *interp;
     PyThreadState *tstate;
     PyObject *bimod, *sysmod, *pstderr;
+#ifdef WITH_PARALLEL
+    PyObject *_parallelmod;
+    PyObject *_asyncmod;
+#endif
     char *p;
     extern void _Py_ReadyTypes(void);
 
@@ -259,6 +262,10 @@ _Py_InitializeEx_Private(int install_sigs, int install_importlib)
     initialized = 1;
     _Py_Finalizing = NULL;
 
+#ifdef WITH_PARALLEL
+    _PyParallel_Init();
+#endif
+
 #if defined(HAVE_LANGINFO_H) && defined(HAVE_SETLOCALE)
     /* Set up the LC_CTYPE locale, so we can obtain
        the locale's charset without having to switch
@@ -290,6 +297,10 @@ _Py_InitializeEx_Private(int install_sigs, int install_importlib)
         Py_FatalError("Py_Initialize: can't make first thread");
     (void) PyThreadState_Swap(tstate);
 
+#ifdef WITH_PARALLEL
+    /*_PyParallel_InterpreterCreatedFirstThread(tstate);*/
+#endif
+
 #ifdef WITH_THREAD
     /* We can't call _PyEval_FiniThreads() in Py_Finalize because
        destroying the GIL might fail when it is being referenced from
@@ -397,6 +408,20 @@ _Py_InitializeEx_Private(int install_sigs, int install_importlib)
 
     if (!Py_NoSiteFlag)
         initsite(); /* Module site */
+#ifdef WITH_PARALLEL
+    _parallelmod = _PyParallel_ModInit();
+    if (_parallelmod == NULL)
+        Py_FatalError("Py_Initialize: can't initialize _parallel module");
+    Py_INCREF(_parallelmod);
+    _PyImport_FixupBuiltin(_parallelmod, "_parallel");
+
+    _asyncmod = _PyAsync_ModInit();
+    if (_asyncmod == NULL)
+        Py_FatalError("Py_Initialize: can't initialize _async module");
+    Py_INCREF(_asyncmod);
+    _PyImport_FixupBuiltin(_asyncmod, "_async");
+
+#endif
 }
 
 void
@@ -484,6 +509,13 @@ Py_Finalize(void)
 
     wait_for_thread_shutdown();
 
+#ifdef WITH_PARALLEL
+    _PyParallel_Finalize();
+    /* Finalization is the source of endless crashes, so let's just
+     * return for now. */
+    return;
+#endif
+
     /* The interpreter is still entirely intact at this point, and the
      * exit funcs may be relying on that.  In particular, if some thread
      * or exit func is still waiting to do an import, the import machinery
@@ -522,7 +554,11 @@ Py_Finalize(void)
      * XXX but I'm unclear on exactly how that one happens.  In any case,
      * XXX I haven't seen a real-life report of either of these.
      */
+
+#ifndef WITH_PARALLEL
     PyGC_Collect();
+#endif
+
 #ifdef COUNT_ALLOCS
     /* With COUNT_ALLOCS, it helps to run GC multiple times:
        each collection might release some types from the type
@@ -555,7 +591,7 @@ Py_Finalize(void)
      * XXX seen segfaults then, after adding print statements to the
      * XXX Python code getting called.
      */
-#if 0
+#ifndef WITH_PARALLEL
     PyGC_Collect();
 #endif
 
@@ -2350,6 +2386,19 @@ Py_FatalError(const char *msg)
 {
     const int fd = fileno(stderr);
     PyThreadState *tstate;
+#ifdef WITH_PARALLEL
+    Py_TLS static volatile unsigned long count;
+
+    if (_PyParallel_GetActiveContext() != NULL)
+        __debugbreak();
+
+    if (InterlockedIncrement(&count) != 1)
+        __debugbreak();
+#endif
+
+#ifdef Py_DEBUG
+    __debugbreak();
+#endif
 
     fprintf(stderr, "Fatal Python error: %s\n", msg);
     fflush(stderr); /* it helps in Windows debug build */
@@ -2405,6 +2454,10 @@ void _Py_PyAtExit(void (*func)(void))
 static void
 call_py_exitfuncs(void)
 {
+    /* Exit funcs and PyParallel aren't playing well.  Let's just not call any
+       of them for now. */
+    return;
+
     if (pyexitfunc == NULL)
         return;
 
