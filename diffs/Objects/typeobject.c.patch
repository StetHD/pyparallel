diff --git a/Objects/typeobject.c b/Objects/typeobject.c
index 8851fae..af56e40 100644
--- a/Objects/typeobject.c
+++ b/Objects/typeobject.c
@@ -53,6 +53,7 @@ PyType_ClearCache(void)
 {
     Py_ssize_t i;
     unsigned int cur_version_tag = next_version_tag - 1;
+    Py_GUARD();
 
     for (i = 0; i < (1 << MCACHE_SIZE_EXP); i++) {
         method_cache[i].version = 0;
@@ -163,6 +164,7 @@ assign_version_tag(PyTypeObject *type)
     */
     Py_ssize_t i, n;
     PyObject *bases;
+    Py_GUARD();
 
     if (PyType_HasFeature(type, Py_TPFLAGS_VALID_VERSION_TAG))
         return 1;
@@ -640,6 +642,7 @@ type_get_doc(PyTypeObject *type, void *context)
 static int
 type_set_doc(PyTypeObject *type, PyObject *value, void *context)
 {
+    Py_GUARD();
     if (!check_set_special_type_attr(type, value, "__doc__"))
         return -1;
     PyType_Modified(type);
@@ -772,7 +775,7 @@ PyType_GenericAlloc(PyTypeObject *type, Py_ssize_t nitems)
     if (type->tp_itemsize == 0)
         PyObject_INIT(obj, type);
     else
-        (void) PyObject_INIT_VAR((PyVarObject *)obj, type, nitems);
+        (void) PyObject_INIT_VAR(obj, type, nitems);
 
     if (PyType_IS_GC(type))
         _PyObject_GC_TRACK(obj);
@@ -2568,6 +2571,8 @@ _PyType_Lookup(PyTypeObject *type, PyObject *name)
     }
     Py_DECREF(mro);
 
+    Px_RETURN(res);
+
     if (MCACHE_CACHEABLE_NAME(name) && assign_version_tag(type)) {
         h = MCACHE_HASH_METHOD(type, name);
         method_cache[h].version = type->tp_version_tag;
