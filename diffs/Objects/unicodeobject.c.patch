diff --git a/Objects/unicodeobject.c b/Objects/unicodeobject.c
--- a/Objects/unicodeobject.c
+++ b/Objects/unicodeobject.c
@@ -175,17 +175,19 @@ extern "C" {
    Another way to look at this is that to say that the actual reference
    count of a string is:  s->ob_refcnt + (s->state ? 2 : 0)
 */
-static PyObject *interned = NULL;
+Py_TLS static PyObject *interned = NULL;
 
 /* The empty Unicode object is shared to improve performance. */
-static PyObject *unicode_empty = NULL;
+Py_TLS static PyObject *unicode_empty = NULL;
 
 #define _Py_INCREF_UNICODE_EMPTY()                      \
     do {                                                \
         if (unicode_empty != NULL)                      \
             Py_INCREF(unicode_empty);                   \
         else {                                          \
+            PyPx_EnableTLSHeap();                       \
             unicode_empty = PyUnicode_New(0, 0);        \
+            PyPx_DisableTLSHeap();                      \
             if (unicode_empty != NULL) {                \
                 Py_INCREF(unicode_empty);               \
                 assert(_PyUnicode_CheckConsistency(unicode_empty, 1)); \
@@ -206,6 +208,12 @@ static _Py_Identifier *static_strings = 
    shared as well. */
 static PyObject *unicode_latin1[256] = {NULL};
 
+#ifdef WITH_PARALLEL
+Py_TLS PyObject *tls_interned;
+Py_TLS _Py_Identifier *tls_static_strings;
+Py_TLS PyObject *tls_unicode_latin1[256];
+#endif
+
 /* Fast detection of the most frequent whitespace characters */
 const unsigned char _Py_ascii_whitespace[] = {
     0, 0, 0, 0, 0, 0, 0, 0,
@@ -475,6 +483,9 @@ unicode_result_ready(PyObject *unicode)
         if (ch < 256) {
             PyObject *latin1_char = unicode_latin1[ch];
             if (latin1_char != NULL) {
+#ifdef WITH_PARALLEL
+                assert(Py_ISPY(latin1_char));
+#endif
                 if (unicode != latin1_char) {
                     Py_INCREF(latin1_char);
                     Py_DECREF(unicode);
@@ -483,8 +494,12 @@ unicode_result_ready(PyObject *unicode)
             }
             else {
                 assert(_PyUnicode_CheckConsistency(unicode, 1));
+#ifdef WITH_PARALLEL
+                tls_unicode_latin1[ch] = unicode;
+#else
                 Py_INCREF(unicode);
                 unicode_latin1[ch] = unicode;
+#endif
                 return unicode;
             }
         }
@@ -980,6 +995,7 @@ PyUnicode_New(Py_ssize_t size, Py_UCS4 m
     int is_sharing, is_ascii;
     Py_ssize_t char_size;
     Py_ssize_t struct_size;
+    Py_ssize_t alloc_size;
 
     /* Optimization for empty strings */
     if (size == 0 && unicode_empty != NULL) {
@@ -1031,7 +1047,8 @@ PyUnicode_New(Py_ssize_t size, Py_UCS4 m
      * PyObject_New() so we are able to allocate space for the object and
      * it's data buffer.
      */
-    obj = (PyObject *) PyObject_MALLOC(struct_size + (size + 1) * char_size);
+    alloc_size = struct_size + (size + 1) * char_size;
+    obj = (PyObject *) PyObject_MALLOC(alloc_size);
     if (obj == NULL)
         return PyErr_NoMemory();
     obj = PyObject_INIT(obj, &PyUnicode_Type);
@@ -1514,6 +1531,8 @@ int
 static void
 unicode_dealloc(register PyObject *unicode)
 {
+    Py_GUARD();
+
     switch (PyUnicode_CHECK_INTERNED(unicode)) {
     case SSTATE_NOT_INTERNED:
         break;
@@ -1555,6 +1574,11 @@ unicode_is_singleton(PyObject *unicode)
         Py_UCS4 ch = PyUnicode_READ_CHAR(unicode, 0);
         if (ch < 256 && unicode_latin1[ch] == unicode)
             return 1;
+#ifdef WITH_PARALLEL
+        /* xxx: is this necessary? */
+        if (ch < 256 && tls_unicode_latin1[ch] == unicode)
+            return 1;
+#endif
     }
     return 0;
 }
@@ -1564,6 +1588,21 @@ static int
 unicode_modifiable(PyObject *unicode)
 {
     assert(_PyUnicode_CHECK(unicode));
+#ifdef WITH_PARALLEL
+    if (Py_PXCTX()) {
+        if (Py_ISPY(unicode))
+            return 0;
+        else {
+            assert(Px_TEST_OBJ(unicode));
+            return 1;
+        }
+    } else {
+        if (!Py_ISPY(unicode)) {
+            assert(Px_TEST_OBJ(unicode));
+            return 0;
+        }
+    }
+#endif
     if (Py_REFCNT(unicode) != 1)
         return 0;
     if (_PyUnicode_HASH(unicode) != -1)
@@ -1720,12 +1759,33 @@ unicode_write_cstr(PyObject *unicode, Py
     }
 }
 
+#ifdef WITH_PARALLEL
+PyObject *
+tls_get_latin1_char(unsigned char ch)
+{
+    PyObject *unicode;
+    Px_GUARD();
+    unicode = tls_unicode_latin1[ch];
+    if (!unicode) {
+        _PyParallel_EnableTLSHeap();
+        unicode = PyUnicode_New(1, ch);
+        _PyParallel_DisableTLSHeap();
+        if (!unicode)
+            return NULL;
+        PyUnicode_1BYTE_DATA(unicode)[0] = ch;
+        assert(_PyUnicode_CheckConsistency(unicode, 1));
+        tls_unicode_latin1[ch] = unicode;
+    }
+    return unicode;
+}
+#endif
 
 static PyObject*
 get_latin1_char(unsigned char ch)
 {
     PyObject *unicode = unicode_latin1[ch];
     if (!unicode) {
+        Px_RETURN(tls_get_latin1_char(ch));
         unicode = PyUnicode_New(1, ch);
         if (!unicode)
             return NULL;
@@ -1824,10 +1884,43 @@ PyUnicode_FromString(const char *u)
     return PyUnicode_DecodeUTF8Stateful(u, (Py_ssize_t)size, NULL, NULL);
 }
 
+#ifdef WITH_PARALLEL
+void _PyParallelUnicode_InternInPlace(PyObject **);
+
+PyObject *
+_PyParallelUnicode_FromId(_Py_Identifier *id)
+{
+    Px_GUARD();
+    assert(!PyErr_Occurred());
+    assert(!id->object);
+    assert(!id->next);
+
+    _PyParallel_EnableTLSHeap();
+    id->object = PyUnicode_DecodeUTF8Stateful(id->string,
+                                              strlen(id->string),
+                                              NULL, NULL);
+    _PyParallel_DisableTLSHeap();
+
+    if (!id->object)
+        return NULL;
+
+    _PyParallelUnicode_InternInPlace(&id->object);
+
+    id->next = tls_static_strings;
+    tls_static_strings = id;
+
+    return id->object;
+}
+#endif
+
 PyObject *
 _PyUnicode_FromId(_Py_Identifier *id)
 {
-    if (!id->object) {
+    if (id->object)
+        return id->object;
+
+    Px_RETURN(_PyParallelUnicode_FromId(id));
+
         id->object = PyUnicode_DecodeUTF8Stateful(id->string,
                                                   strlen(id->string),
                                                   NULL, NULL);
@@ -1837,14 +1930,36 @@ PyObject *
         assert(!id->next);
         id->next = static_strings;
         static_strings = id;
-    }
+
     return id->object;
 }
 
 void
-_PyUnicode_ClearStaticStrings()
-{
-    _Py_Identifier *tmp, *s = static_strings;
+__PyUnicode_ClearStaticStrings(void)
+{
+    _Py_Identifier *tmp, *s;
+    Py_GUARD();
+    s = static_strings;
+    while (s) {
+        Py_OCLEAR(s->object);
+        tmp = s->next;
+        s->next = NULL;
+        s = tmp;
+    }
+    static_strings = NULL;
+}
+
+#ifdef WITH_PARALLEL
+/* Getting bizarre crashes when trying to install things like ipython/numpy,
+   so try band-aid with SEH. */
+volatile long _PyParallel_ExceptionIgnored_PyUnicode_ClearStaticStrings = 0;
+void
+_PyUnicode_ClearStaticStrings_SEH()
+{
+    _Py_Identifier *tmp, *s;
+    Py_GUARD();
+    s = static_strings;
+    __try {
     while (s) {
         Py_CLEAR(s->object);
         tmp = s->next;
@@ -1852,7 +1967,25 @@ void
         s = tmp;
     }
     static_strings = NULL;
-}
+    } __except(EXCEPTION_EXECUTE_HANDLER) {
+        //__debugbreak();
+        OutputDebugStringA("PyParallel: PyUnicode: Exception in ClearStaticStrings");
+        InterlockedIncrement(&_PyParallel_ExceptionIgnored_PyUnicode_ClearStaticStrings);
+    }
+}
+#endif
+
+void
+_PyUnicode_ClearStaticStrings(void)
+{
+    /* Switch this around when necessary (during debugging etc). */
+    /* Update: the Py_OCLEAR() fix above doesn't work, so, eh, no static string
+       cleanup for now. */
+
+    //_PyUnicode_ClearStaticStrings_SEH();
+    //__PyUnicode_ClearStaticStrings();
+}
+
 
 /* Internal function, doesn't check maximum character */
 
@@ -3100,6 +3233,7 @@ PyUnicode_Decode(const char *s,
     PyObject *buffer = NULL, *unicode;
     Py_buffer info;
     char lower[11];  /* Enough for any encoding shortcut */
+    int byteorder_n1 = -1;
 
     /* Shortcuts for common default encodings */
     if (_Py_normalize_encoding(encoding, lower, sizeof(lower))) {
@@ -3120,6 +3254,9 @@ PyUnicode_Decode(const char *s,
             return PyUnicode_DecodeUTF16(s, size, errors, 0);
         else if (strcmp(lower, "utf-32") == 0)
             return PyUnicode_DecodeUTF32(s, size, errors, 0);
+        /* Added for pyparallel/datrie (which needs utf-32-le). */
+        else if (strcmp(lower, "utf-32-le") == 0)
+            return PyUnicode_DecodeUTF32(s, size, errors, &byteorder_n1);
     }
 
     /* Decode via the codec registry */
@@ -3737,10 +3874,13 @@ PyUnicode_DecodeFSDefaultAndSize(const c
 int
 _PyUnicode_HasNULChars(PyObject* s)
 {
-    static PyObject *nul = NULL;
-
-    if (nul == NULL)
+    Py_TLS static PyObject *nul = NULL;
+
+    if (nul == NULL) {
+        PyPx_EnableTLSHeap();
         nul = PyUnicode_FromStringAndSize("\0", 1);
+        PyPx_DisableTLSHeap();
+    }
     if (nul == NULL)
         return -1;
     return PyUnicode_Contains(s, nul);
@@ -3884,6 +4024,7 @@ PyUnicode_AsUnicodeAndSize(PyObject *uni
 #endif
     wchar_t *w;
     wchar_t *wchar_end;
+    short use_tls_heap = (Py_PXCTX() && Py_ISPY(unicode));
 
     if (!PyUnicode_Check(unicode)) {
         PyErr_BadArgument();
@@ -3904,9 +4045,12 @@ PyUnicode_AsUnicodeAndSize(PyObject *uni
                 if (*four_bytes > 0xFFFF)
                     ++num_surrogates;
             }
-
+            if (use_tls_heap)
+                 _PyParallel_EnableTLSHeap();
             _PyUnicode_WSTR(unicode) = (wchar_t *) PyObject_MALLOC(
                     sizeof(wchar_t) * (_PyUnicode_LENGTH(unicode) + 1 + num_surrogates));
+            if (use_tls_heap)
+                _PyParallel_DisableTLSHeap();
             if (!_PyUnicode_WSTR(unicode)) {
                 PyErr_NoMemory();
                 return NULL;
@@ -3939,8 +4083,12 @@ PyUnicode_AsUnicodeAndSize(PyObject *uni
 #endif
         }
         else {
+            if (use_tls_heap)
+                _PyParallel_EnableTLSHeap();
             _PyUnicode_WSTR(unicode) = (wchar_t *) PyObject_MALLOC(sizeof(wchar_t) *
                                                   (_PyUnicode_LENGTH(unicode) + 1));
+            if (use_tls_heap)
+                _PyParallel_DisableTLSHeap();
             if (!_PyUnicode_WSTR(unicode)) {
                 PyErr_NoMemory();
                 return NULL;
@@ -3966,6 +4114,7 @@ PyUnicode_AsUnicodeAndSize(PyObject *uni
                 *w = 0;
 #else
                 /* sizeof(wchar_t) == 2 */
+                if (!use_tls_heap)
                 PyObject_FREE(_PyUnicode_WSTR(unicode));
                 _PyUnicode_WSTR(unicode) = NULL;
                 Py_FatalError("Impossible unicode object state, wstr "
@@ -14156,6 +14305,8 @@ int _PyUnicode_Init(void)
         0x2029, /* PARAGRAPH SEPARATOR */
     };
 
+    Py_GUARD();
+
     /* Init the implementation */
     _Py_INCREF_UNICODE_EMPTY();
     if (!unicode_empty)
@@ -14194,6 +14345,7 @@ int _PyUnicode_Init(void)
 int
 PyUnicode_ClearFreeList(void)
 {
+    Py_GUARD();
     return 0;
 }
 
@@ -14201,15 +14353,80 @@ void
 _PyUnicode_Fini(void)
 {
     int i;
-
-    Py_CLEAR(unicode_empty);
+    Py_GUARD();
+
+    Py_OCLEAR(unicode_empty);
 
     for (i = 0; i < 256; i++)
-        Py_CLEAR(unicode_latin1[i]);
+        Py_OCLEAR(unicode_latin1[i]);
     _PyUnicode_ClearStaticStrings();
     (void)PyUnicode_ClearFreeList();
 }
 
+#ifdef WITH_PARALLEL
+void
+_PyParallelUnicode_InternInPlace(PyObject **p)
+{
+    PyObject *s = *p;
+    PyObject *t;
+    PyThreadState *tstate;
+    int failed;
+
+    Px_GUARD();
+
+    if (interned) {
+        _PyParallel_EnableTLSHeap();
+        Py_ALLOW_RECURSION
+        t = PyDict_GetItem(interned, s);
+        Py_END_ALLOW_RECURSION
+        _PyParallel_DisableTLSHeap();
+        if (t) {
+            *p = t;
+            return;
+        }
+    }
+
+    if (!tls_interned) {
+        _PyParallel_EnableTLSHeap();
+        tls_interned = PyDict_New();
+        _PyParallel_DisableTLSHeap();
+        if (!tls_interned) {
+            PyErr_Clear(); /* Don't leave an exception */
+            return;
+        }
+    }
+    /* It might be that the GetItem call fails even
+       though the key is present in the dictionary,
+       namely when this happens during a stack overflow. */
+    Py_ALLOW_RECURSION
+    _PyParallel_EnableTLSHeap();
+    t = PyDict_GetItem(tls_interned, s);
+    _PyParallel_DisableTLSHeap();
+    Py_END_ALLOW_RECURSION
+
+    if (t) {
+        *p = t;
+        return;
+    }
+
+    tstate = _PyParallel_GetThreadState();
+    tstate->recursion_critical = 1;
+
+    _PyParallel_EnableTLSHeap();
+    failed = PyDict_SetItem(tls_interned, s, s);
+    _PyParallel_DisableTLSHeap();
+
+    if (failed)
+        PyErr_Clear();
+    else
+        _PyUnicode_STATE(s).interned = SSTATE_INTERNED_MORTAL;
+
+    tstate->recursion_critical = 0;
+}
+#else
+#define _PyParallelUnicode_InternInPlace(p)
+#endif
+
 void
 PyUnicode_InternInPlace(PyObject **p)
 {
@@ -14228,13 +14445,19 @@ PyUnicode_InternInPlace(PyObject **p)
         return;
     if (PyUnicode_CHECK_INTERNED(s))
         return;
-    if (interned == NULL) {
-        interned = PyDict_New();
-        if (interned == NULL) {
-            PyErr_Clear(); /* Don't leave an exception */
+
+#ifdef WITH_PARALLEL
+    Px_RETURN_VOID(_PyParallelUnicode_InternInPlace(p));
+
+    if (Py_ISPX(s))
+        Py_FatalError("PyUnicode_InternInPlace() attempted to intern "
+                      "a parallel object from the main thread");
+#endif
+
+    if (!interned)
+        /* interned dict hasn't been initialized yet */
             return;
-        }
-    }
+
     /* It might be that the GetItem call fails even
        though the key is present in the dictionary,
        namely when this happens during a stack overflow. */
@@ -14258,7 +14481,8 @@ PyUnicode_InternInPlace(PyObject **p)
     PyThreadState_GET()->recursion_critical = 0;
     /* The two references in interned are not counted by refcnt.
        The deallocator will take care of this */
-    Py_REFCNT(s) -= 2;
+    Py_DECREF(s);
+    Py_DECREF(s);
     _PyUnicode_STATE(s).interned = SSTATE_INTERNED_MORTAL;
 }
 
@@ -14275,10 +14499,14 @@ PyUnicode_InternImmortal(PyObject **p)
 PyObject *
 PyUnicode_InternFromString(const char *cp)
 {
-    PyObject *s = PyUnicode_FromString(cp);
+    PyObject *s = NULL;
+    _PyParallel_EnableTLSHeap();
+    s = PyUnicode_FromString(cp);
+    _PyParallel_DisableTLSHeap();
     if (s == NULL)
-        return NULL;
+        goto end;
     PyUnicode_InternInPlace(&s);
+end:
     return s;
 }
 
@@ -14289,6 +14517,7 @@ void
     PyObject *s;
     Py_ssize_t i, n;
     Py_ssize_t immortal_size = 0, mortal_size = 0;
+    Py_GUARD();
 
     if (interned == NULL || !PyDict_Check(interned))
         return;
@@ -14317,11 +14546,12 @@ void
             /* XXX Shouldn't happen */
             break;
         case SSTATE_INTERNED_IMMORTAL:
-            Py_REFCNT(s) += 1;
+            Py_INCREF(s);
             immortal_size += PyUnicode_GET_LENGTH(s);
             break;
         case SSTATE_INTERNED_MORTAL:
-            Py_REFCNT(s) += 2;
+            Py_INCREF(s);
+            Py_INCREF(s);
             mortal_size += PyUnicode_GET_LENGTH(s);
             break;
         default:
@@ -14349,6 +14579,7 @@ typedef struct {
 static void
 unicodeiter_dealloc(unicodeiterobject *it)
 {
+    Py_GUARD();
     _PyObject_GC_UNTRACK(it);
     Py_XDECREF(it->it_seq);
     PyObject_GC_Del(it);
@@ -14357,6 +14588,7 @@ unicodeiter_dealloc(unicodeiterobject *i
 static int
 unicodeiter_traverse(unicodeiterobject *it, visitproc visit, void *arg)
 {
+    Py_GUARD();
     Py_VISIT(it->it_seq);
     return 0;
 }
