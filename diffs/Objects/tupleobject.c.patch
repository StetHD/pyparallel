diff --git a/Objects/tupleobject.c b/Objects/tupleobject.c
index 123df8c..0e0f56d 100644
--- a/Objects/tupleobject.c
+++ b/Objects/tupleobject.c
@@ -3,6 +3,7 @@
 
 #include "Python.h"
 #include "accu.h"
+#include "statics.h"
 
 /* Speed optimization to avoid frequent malloc/free of small tuples */
 #ifndef PyTuple_MAXSAVESIZE
@@ -36,6 +37,7 @@ static Py_ssize_t count_tracked = 0;
 static void
 show_track(void)
 {
+    Py_GUARD();
     fprintf(stderr, "Tuples created: %" PY_FORMAT_SIZE_T "d\n",
         count_tracked + count_untracked);
     fprintf(stderr, "Tuples tracked by the GC: %" PY_FORMAT_SIZE_T
@@ -52,6 +54,7 @@ _PyTuple_DebugMallocStats(FILE *out)
 #if PyTuple_MAXSAVESIZE > 0
     int i;
     char buf[128];
+    Py_GUARD();
     for (i = 1; i < PyTuple_MAXSAVESIZE; i++) {
         PyOS_snprintf(buf, sizeof(buf),
                       "free %d-sized PyTupleObject", i);
@@ -71,6 +74,8 @@ PyTuple_New(register Py_ssize_t size)
         PyErr_BadInternalCall();
         return NULL;
     }
+    if (Py_PXCTX())
+        goto newvar;
 #if PyTuple_MAXSAVESIZE > 0
     if (size == 0 && free_list[0]) {
         op = free_list[0];
@@ -96,6 +101,7 @@ PyTuple_New(register Py_ssize_t size)
     else
 #endif
     {
+newvar:
         /* Check for overflow */
         if (size > (PY_SSIZE_T_MAX - sizeof(PyTupleObject) -
                     sizeof(PyObject *)) / sizeof(PyObject *)) {
@@ -107,6 +113,10 @@ PyTuple_New(register Py_ssize_t size)
     }
     for (i=0; i < size; i++)
         op->ob_item[i] = NULL;
+
+    if (Py_PXCTX())
+        goto end;
+
 #if PyTuple_MAXSAVESIZE > 0
     if (size == 0) {
         free_list[0] = op;
@@ -118,6 +128,7 @@ PyTuple_New(register Py_ssize_t size)
     count_tracked++;
 #endif
     _PyObject_GC_TRACK(op);
+end:
     return (PyObject *) op;
 }
 
@@ -146,6 +157,20 @@ PyTuple_GetItem(register PyObject *op, register Py_ssize_t i)
     return ((PyTupleObject *)op) -> ob_item[i];
 }
 
+PyObject **
+PyTuple_GetItemAddr(register PyObject *op, register Py_ssize_t i)
+{
+    if (!PyTuple_Check(op)) {
+        PyErr_BadInternalCall();
+        return NULL;
+    }
+    if (i < 0 || i >= Py_SIZE(op)) {
+        PyErr_SetString(PyExc_IndexError, "tuple index out of range");
+        return NULL;
+    }
+    return &(((PyTupleObject *)op)->ob_item[i]);
+}
+
 int
 PyTuple_SetItem(register PyObject *op, register Py_ssize_t i, PyObject *newitem)
 {
@@ -174,6 +199,8 @@ _PyTuple_MaybeUntrack(PyObject *op)
 {
     PyTupleObject *t;
     Py_ssize_t i, n;
+    Py_GUARD();
+    Py_GUARD_OBJ(op);
 
     if (!PyTuple_CheckExact(op) || !_PyObject_GC_IS_TRACKED(op))
         return;
@@ -228,6 +255,7 @@ tupledealloc(register PyTupleObject *op)
 {
     register Py_ssize_t i;
     register Py_ssize_t len =  Py_SIZE(op);
+    Py_GUARD();
     PyObject_GC_UnTrack(op);
     Py_TRASHCAN_SAFE_BEGIN(op)
     if (len > 0) {
@@ -255,19 +283,15 @@ static PyObject *
 tuplerepr(PyTupleObject *v)
 {
     Py_ssize_t i, n;
-    PyObject *s = NULL;
     _PyAccu acc;
-    static PyObject *sep = NULL;
+    PyObject *s = NULL;
+    PyObject *sep = NULL;
 
     n = Py_SIZE(v);
     if (n == 0)
-        return PyUnicode_FromString("()");
+        return Py_STATIC(empty_tuple);
 
-    if (sep == NULL) {
-        sep = PyUnicode_FromString(", ");
-        if (sep == NULL)
-            return NULL;
-    }
+    sep = Py_STATIC(comma_space);
 
     /* While not mutable, it is still possible to end up with a cycle in a
        tuple through an object that stores itself within a tuple (and thus
@@ -275,14 +299,14 @@ tuplerepr(PyTupleObject *v)
        possible within a type. */
     i = Py_ReprEnter((PyObject *)v);
     if (i != 0) {
-        return i > 0 ? PyUnicode_FromString("(...)") : NULL;
+        return i > 0 ? Py_STATIC(empty_tuple) : NULL;
     }
 
     if (_PyAccu_Init(&acc))
         goto error;
 
-    s = PyUnicode_FromString("(");
-    if (s == NULL || _PyAccu_Accumulate(&acc, s))
+    s = Py_STATIC(open_tuple);
+    if (_PyAccu_Accumulate(&acc, s))
         goto error;
     Py_CLEAR(s);
 
@@ -299,10 +323,10 @@ tuplerepr(PyTupleObject *v)
         Py_CLEAR(s);
     }
     if (n > 1)
-        s = PyUnicode_FromString(")");
+        s = Py_STATIC(close_tuple);
     else
-        s = PyUnicode_FromString(",)");
-    if (s == NULL || _PyAccu_Accumulate(&acc, s))
+        s = Py_STATIC(comma_close_tuple);
+    if (_PyAccu_Accumulate(&acc, s))
         goto error;
     Py_CLEAR(s);
 
@@ -850,7 +874,7 @@ _PyTuple_Resize(PyObject **pv, Py_ssize_t newsize)
     if (oldsize == newsize)
         return 0;
 
-    if (oldsize == 0) {
+    if (oldsize == 0 || (Py_PXCTX() && Py_ISPY(v))) {
         /* Empty tuples are often shared, so we should never
            resize them in-place even if we do own the only
            (current) reference */
@@ -859,6 +883,8 @@ _PyTuple_Resize(PyObject **pv, Py_ssize_t newsize)
         return *pv == NULL ? -1 : 0;
     }
 
+    PyPx_GUARD_OBJ(v);
+
     /* XXX UNREF/NEWREF interface should be more symmetrical */
     _Py_DEC_REFTOTAL;
     if (_PyObject_GC_IS_TRACKED(v))
@@ -890,6 +916,8 @@ PyTuple_ClearFreeList(void)
     int freelist_size = 0;
 #if PyTuple_MAXSAVESIZE > 0
     int i;
+    if (Py_PXCTX())
+        return 0;
     for (i = 1; i < PyTuple_MAXSAVESIZE; i++) {
         PyTupleObject *p, *q;
         p = free_list[i];
@@ -912,6 +940,7 @@ PyTuple_Fini(void)
 #if PyTuple_MAXSAVESIZE > 0
     /* empty tuples are used all over the place and applications may
      * rely on the fact that an empty tuple is a singleton. */
+    Py_GUARD();
     Py_CLEAR(free_list[0]);
 
     (void)PyTuple_ClearFreeList();
