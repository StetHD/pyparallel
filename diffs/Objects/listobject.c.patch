diff --git a/Objects/listobject.c b/Objects/listobject.c
index 6e0d094..bb76c63 100644
--- a/Objects/listobject.c
+++ b/Objects/listobject.c
@@ -2,6 +2,7 @@
 
 #include "Python.h"
 #include "accu.h"
+#include "statics.h"
 
 #ifdef STDC_HEADERS
 #include <stddef.h>
@@ -39,6 +40,14 @@ list_resize(PyListObject *self, Py_ssize_t newsize)
         return 0;
     }
 
+#ifdef WITH_PARALLEL
+    if (Py_PXCTX() && Py_ISPY(self)) {
+        PyErr_SetString(PyExc_AssignmentError,
+                        "a parallel thread attempted to resize a list that "
+                        "was allocated from the main thread");
+        return -1;
+    }
+#endif
     /* This over-allocates proportional to the list size, making room
      * for additional growth.  The over-allocation is mild, but is
      * enough to give linear-time amortized behavior over a long
@@ -82,6 +91,7 @@ static size_t count_reuse = 0;
 static void
 show_alloc(void)
 {
+    Py_GUARD();
     fprintf(stderr, "List allocations: %" PY_FORMAT_SIZE_T "d\n",
         count_alloc);
     fprintf(stderr, "List reuse through freelist: %" PY_FORMAT_SIZE_T
@@ -103,6 +113,8 @@ PyList_ClearFreeList(void)
 {
     PyListObject *op;
     int ret = numfree;
+    if (Py_PXCTX())
+        return 0;
     while (numfree) {
         op = free_list[--numfree];
         assert(PyList_CheckExact(op));
@@ -114,6 +126,7 @@ PyList_ClearFreeList(void)
 void
 PyList_Fini(void)
 {
+    Py_GUARD();
     PyList_ClearFreeList();
 }
 
@@ -121,6 +134,7 @@ PyList_Fini(void)
 void
 _PyList_DebugMallocStats(FILE *out)
 {
+    Py_GUARD();
     _PyDebugAllocatorStats(out,
                            "free PyListObject",
                            numfree, sizeof(PyListObject));
@@ -133,7 +147,7 @@ PyList_New(Py_ssize_t size)
     size_t nbytes;
 #ifdef SHOW_ALLOC_COUNT
     static int initialized = 0;
-    if (!initialized) {
+    if (!initialized && !Py_PXCTX()) {
         Py_AtExit(show_alloc);
         initialized = 1;
     }
@@ -148,7 +162,7 @@ PyList_New(Py_ssize_t size)
     if ((size_t)size > PY_SIZE_MAX / sizeof(PyObject *))
         return PyErr_NoMemory();
     nbytes = size * sizeof(PyObject *);
-    if (numfree) {
+    if (!Py_PXCTX() && numfree) {
         numfree--;
         op = free_list[numfree];
         _Py_NewReference((PyObject *)op);
@@ -229,6 +243,14 @@ PyList_SetItem(register PyObject *op, register Py_ssize_t i,
                         "list assignment index out of range");
         return -1;
     }
+#ifdef WITH_PARALLEL
+    if (Py_PXCTX() && Py_ISPY(op) && Py_ISPX(newitem)) {
+        PyErr_SetString(PyExc_AssignmentError,
+                        "a parallel thread attempted to modify a list "
+                        "that was was allocated from the main thread");
+        return -1;
+    }
+#endif
     p = ((PyListObject *)op) -> ob_item + i;
     olditem = *p;
     *p = newitem;
@@ -251,6 +273,15 @@ ins1(PyListObject *self, Py_ssize_t where, PyObject *v)
         return -1;
     }
 
+#ifdef WITH_PARALLEL
+    if (Py_PXCTX() && Py_ISPY(self) && Py_ISPX(v)) {
+        PyErr_SetString(PyExc_AssignmentError,
+                        "a parallel thread attempted to modify a list "
+                        "that was was allocated from the main thread");
+        return -1;
+    }
+#endif
+
     if (list_resize(self, n+1) == -1)
         return -1;
 
@@ -291,6 +322,16 @@ app1(PyListObject *self, PyObject *v)
         return -1;
     }
 
+#ifdef WITH_PARALLEL
+    if (Py_PXCTX() && Py_ISPY(self) && Py_ISPX(v)) {
+        PyErr_SetString(PyExc_AssignmentError,
+                        "a parallel thread attempted to modify a list "
+                        "that was was allocated from the main thread");
+        return -1;
+    }
+#endif
+
+
     if (list_resize(self, n+1) == -1)
         return -1;
 
@@ -314,6 +355,7 @@ static void
 list_dealloc(PyListObject *op)
 {
     Py_ssize_t i;
+    Py_GUARD();
     PyObject_GC_UnTrack(op);
     Py_TRASHCAN_SAFE_BEGIN(op)
     if (op->ob_item != NULL) {
@@ -339,32 +381,28 @@ list_repr(PyListObject *v)
 {
     Py_ssize_t i;
     PyObject *s = NULL;
+    PyObject *sep = NULL;
     _PyAccu acc;
-    static PyObject *sep = NULL;
 
     if (Py_SIZE(v) == 0) {
-        return PyUnicode_FromString("[]");
-    }
-
-    if (sep == NULL) {
-        sep = PyUnicode_FromString(", ");
-        if (sep == NULL)
-            return NULL;
+        return Py_STATIC(empty_array);
     }
 
     i = Py_ReprEnter((PyObject*)v);
     if (i != 0) {
-        return i > 0 ? PyUnicode_FromString("[...]") : NULL;
+        return i > 0 ? Py_STATIC(ellipsis_array) : NULL;
     }
 
     if (_PyAccu_Init(&acc))
         goto error;
 
-    s = PyUnicode_FromString("[");
+    s = Py_STATIC(open_array);
     if (s == NULL || _PyAccu_Accumulate(&acc, s))
         goto error;
     Py_CLEAR(s);
 
+    sep = Py_STATIC(comma_space);
+
     /* Do repr() on each element.  Note that this may mutate the list,
        so must refetch the list size on each iteration. */
     for (i = 0; i < Py_SIZE(v); ++i) {
@@ -378,7 +416,7 @@ list_repr(PyListObject *v)
             goto error;
         Py_CLEAR(s);
     }
-    s = PyUnicode_FromString("]");
+    s = Py_STATIC(close_array);
     if (s == NULL || _PyAccu_Accumulate(&acc, s))
         goto error;
     Py_CLEAR(s);
@@ -389,6 +427,7 @@ list_repr(PyListObject *v)
 error:
     _PyAccu_Destroy(&acc);
     Py_XDECREF(s);
+    Py_XDECREF(sep);
     Py_ReprLeave((PyObject *)v);
     return NULL;
 }
@@ -550,7 +589,16 @@ static int
 list_clear(PyListObject *a)
 {
     Py_ssize_t i;
-    PyObject **item = a->ob_item;
+    PyObject **item;
+#ifdef WITH_PARALLEL
+    if (Py_PXCTX() && Px_ISPY(a)) {
+        PyErr_SetString(PyExc_AssignmentError,
+                        "parallel thread attempted to clear a list "
+                        "allocated from the main thread");
+        return -1;
+    }
+#endif 
+    item = a->ob_item;
     if (item != NULL) {
         /* Because XDECREF can recursively invoke operations on
            this list, we make it empty first. */
@@ -595,6 +643,14 @@ list_ass_slice(PyListObject *a, Py_ssize_t ilow, Py_ssize_t ihigh, PyObject *v)
     Py_ssize_t k;
     size_t s;
     int result = -1;            /* guilty until proved innocent */
+#ifdef WITH_PARALLEL
+    if (Py_PXCTX() && Px_ISPY(a)) {
+        PyErr_SetString(PyExc_AssignmentError,
+                        "parallel thread attempted to assign to a slice "
+                        "of a main thread list");
+        return result;
+    }
+#endif
 #define b ((PyListObject *)v)
     if (v == NULL)
         n = 0;
@@ -2446,6 +2502,15 @@ list_subscript(PyListObject* self, PyObject* item)
 static int
 list_ass_subscript(PyListObject* self, PyObject* item, PyObject* value)
 {
+#ifdef WITH_PARALLEL
+    if (Py_PXCTX() && Px_ISPY(self)) {
+        __debugbreak();
+        PyErr_SetString(PyExc_AssignmentError,
+                        "parallel thread attempted to "
+                        "assign to main thread list");
+        return -1;
+    }
+#endif
     if (PyIndex_Check(item)) {
         Py_ssize_t i = PyNumber_AsSsize_t(item, PyExc_IndexError);
         if (i == -1 && PyErr_Occurred())
