diff --git a/Objects/classobject.c b/Objects/classobject.c
index cdc9b1c..8d4ce94 100644
--- a/Objects/classobject.c
+++ b/Objects/classobject.c
@@ -36,6 +36,34 @@ PyMethod_Self(PyObject *im)
     return ((PyMethodObject *)im)->im_self;
 }
 
+PyObject *
+PyMethod_Clone(PyObject *orig)
+{
+    PyMethodObject *om = (PyMethodObject *)orig;
+    PyMethodObject *im = NULL;
+
+    if (!Py_PXCTX())
+        __debugbreak();
+
+    if (!PyMethod_Check(orig)) {
+        PyErr_BadInternalCall();
+        return NULL;
+    }
+
+    if (om->im_weakreflist)
+        __debugbreak();
+
+    im = PyObject_GC_New(PyMethodObject, &PyMethod_Type);
+    if (!im)
+        return NULL;
+    
+    im->im_func = om->im_func;
+    im->im_self = om->im_self;
+
+    return (PyObject *)im;
+}
+
+
 /* Method objects are used for bound instance methods returned by
    instancename.methodname. ClassName.methodname returns an ordinary
    function.
@@ -50,7 +78,7 @@ PyMethod_New(PyObject *func, PyObject *self)
         return NULL;
     }
     im = free_list;
-    if (im != NULL) {
+    if (!Py_PXCTX() && im != NULL) {
         free_list = (PyMethodObject *)(im->im_self);
         PyObject_INIT(im, &PyMethod_Type);
         numfree--;
@@ -166,6 +194,7 @@ method_new(PyTypeObject* type, PyObject* args, PyObject *kw)
 static void
 method_dealloc(register PyMethodObject *im)
 {
+    Py_GUARD();
     _PyObject_GC_UNTRACK(im);
     if (im->im_weakreflist != NULL)
         PyObject_ClearWeakRefs((PyObject *)im);
@@ -387,6 +416,9 @@ PyMethod_ClearFreeList(void)
 {
     int freelist_size = numfree;
 
+    if (Py_PXCTX())
+        return 0;
+
     while (free_list) {
         PyMethodObject *im = free_list;
         free_list = (PyMethodObject *)(im->im_self);
@@ -400,6 +432,7 @@ PyMethod_ClearFreeList(void)
 void
 PyMethod_Fini(void)
 {
+    Py_GUARD();
     (void)PyMethod_ClearFreeList();
 }
 
