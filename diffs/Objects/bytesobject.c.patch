diff --git a/Objects/bytesobject.c b/Objects/bytesobject.c
--- a/Objects/bytesobject.c
+++ b/Objects/bytesobject.c
@@ -26,7 +26,7 @@ static Py_ssize_t
 }
 
 #ifdef COUNT_ALLOCS
-Py_ssize_t null_strings, one_strings;
+Py_TLS Py_ssize_t null_strings, one_strings;
 #endif
 
 static PyBytesObject *characters[UCHAR_MAX + 1];
@@ -103,6 +103,10 @@ PyBytes_FromStringAndSize(const char *st
     if (str != NULL)
         Py_MEMCPY(op->ob_sval, str, size);
     op->ob_sval[size] = '\0';
+
+    if (Py_PXCTX())
+        goto end;
+
     /* share short strings */
     if (size == 0) {
         nullstring = op;
@@ -111,6 +115,7 @@ PyBytes_FromStringAndSize(const char *st
         characters[*str & UCHAR_MAX] = op;
         Py_INCREF(op);
     }
+end:
     return (PyObject *) op;
 }
 
@@ -149,6 +154,10 @@ PyBytes_FromString(const char *str)
     PyObject_INIT_VAR(op, &PyBytes_Type, size);
     op->ob_shash = -1;
     Py_MEMCPY(op->ob_sval, str, size+1);
+
+    if (Py_PXCTX())
+        goto end;
+
     /* share short strings */
     if (size == 0) {
         nullstring = op;
@@ -157,6 +166,7 @@ PyBytes_FromString(const char *str)
         characters[*str & UCHAR_MAX] = op;
         Py_INCREF(op);
     }
+end:
     return (PyObject *) op;
 }
 
@@ -2887,6 +2897,8 @@ int
         PyErr_BadInternalCall();
         return -1;
     }
+    PyPx_GUARD_OBJ(v);
+
     /* XXX UNREF/NEWREF interface should be more symmetrical */
     _Py_DEC_REFTOTAL;
     _Py_ForgetReference(v);
@@ -2909,6 +2921,8 @@ void
 PyBytes_Fini(void)
 {
     int i;
+    if (Py_PXCTX())
+        return;
     for (i = 0; i < UCHAR_MAX + 1; i++)
         Py_CLEAR(characters[i]);
     Py_CLEAR(nullstring);
