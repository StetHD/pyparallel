diff --git a/Objects/bytesobject.c b/Objects/bytesobject.c
index 9dcb74e..1afba04 100644
--- a/Objects/bytesobject.c
+++ b/Objects/bytesobject.c
@@ -26,7 +26,7 @@ _getbuffer(PyObject *obj, Py_buffer *view)
 }
 
 #ifdef COUNT_ALLOCS
-Py_ssize_t null_strings, one_strings;
+Py_TLS Py_ssize_t null_strings, one_strings;
 #endif
 
 static PyBytesObject *characters[UCHAR_MAX + 1];
@@ -103,6 +103,10 @@ PyBytes_FromStringAndSize(const char *str, Py_ssize_t size)
     if (str != NULL)
         Py_MEMCPY(op->ob_sval, str, size);
     op->ob_sval[size] = '\0';
+
+    if (Py_PXCTX())
+        goto end;
+
     /* share short strings */
     if (size == 0) {
         nullstring = op;
@@ -111,6 +115,7 @@ PyBytes_FromStringAndSize(const char *str, Py_ssize_t size)
         characters[*str & UCHAR_MAX] = op;
         Py_INCREF(op);
     }
+end:
     return (PyObject *) op;
 }
 
@@ -149,6 +154,10 @@ PyBytes_FromString(const char *str)
     PyObject_INIT_VAR(op, &PyBytes_Type, size);
     op->ob_shash = -1;
     Py_MEMCPY(op->ob_sval, str, size+1);
+
+    if (Py_PXCTX())
+        goto end;
+
     /* share short strings */
     if (size == 0) {
         nullstring = op;
@@ -157,6 +166,7 @@ PyBytes_FromString(const char *str)
         characters[*str & UCHAR_MAX] = op;
         Py_INCREF(op);
     }
+end:
     return (PyObject *) op;
 }
 
@@ -2835,8 +2845,46 @@ PyTypeObject PyBytes_Type = {
     0,                                          /* tp_alloc */
     bytes_new,                                  /* tp_new */
     PyObject_Del,                               /* tp_free */
+    0,                                          /* tp_is_gc */
+    0,                                          /* tp_bases */
+    0,                                          /* tp_mro */
+    0,                                          /* tp_cache */
+    0,                                          /* tp_subclasses */
+    0,                                          /* tp_weaklist */
+    0,                                          /* tp_del */
+    0,                                          /* tp_version_tag */
+    PyBytes_CopyObject                          /* tp_copy */
 };
 
+PyBytesObject *
+PyBytes_Copy(PyBytesObject *src)
+{
+    PyBytesObject *dst;
+
+    dst = (PyBytesObject *)PyVarObject_Copy((PyObject *)src);
+    if (!dst)
+        return NULL;
+
+#ifdef Py_DEBUG
+    assert(dst->ob_shash == src->ob_shash);
+    assert(dst->ob_sval[Py_SIZE(dst)] == '\0');
+#endif
+
+    return dst;
+}
+
+PyObject *
+PyBytes_CopyObject(PyObject *o)
+{
+    if (!PyBytes_Check(o)) {
+        PyErr_SetString(PyExc_ValueError,
+                        "bytes copy attempted on non-bytes object");
+        return NULL;
+    }
+
+    return (PyObject *)PyBytes_Copy((PyBytesObject *)o);
+}
+
 void
 PyBytes_Concat(register PyObject **pv, register PyObject *w)
 {
@@ -2887,6 +2935,8 @@ _PyBytes_Resize(PyObject **pv, Py_ssize_t newsize)
         PyErr_BadInternalCall();
         return -1;
     }
+    PyPx_GUARD_OBJ(v);
+
     /* XXX UNREF/NEWREF interface should be more symmetrical */
     _Py_DEC_REFTOTAL;
     _Py_ForgetReference(v);
@@ -2909,6 +2959,8 @@ void
 PyBytes_Fini(void)
 {
     int i;
+    if (Py_PXCTX())
+        return;
     for (i = 0; i < UCHAR_MAX + 1; i++)
         Py_CLEAR(characters[i]);
     Py_CLEAR(nullstring);
