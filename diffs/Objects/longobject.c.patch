diff --git a/Objects/longobject.c b/Objects/longobject.c
index 4ae22ef..0f9a1f4 100644
--- a/Objects/longobject.c
+++ b/Objects/longobject.c
@@ -37,6 +37,8 @@ static PyObject *
 get_small_int(sdigit ival)
 {
     PyObject *v = (PyObject*)(small_ints + ival + NSMALLNEGINTS);
+    if (Py_PXCTX())
+        goto end;
     Py_INCREF(v);
 #ifdef COUNT_ALLOCS
     if (ival >= 0)
@@ -44,6 +46,7 @@ get_small_int(sdigit ival)
     else
         quick_neg_int_allocs++;
 #endif
+end:
     return v;
 }
 #define CHECK_SMALL_INT(ival) \
@@ -209,6 +212,15 @@ _PyLong_Copy(PyLongObject *src)
     return (PyObject *)result;
 }
 
+/* We provide this method as well such that the tp_copy slot can conform to
+ * the copyfunc typedef (which has a `PyObject * (*func)(PyObject *)`
+ * signature). */
+PyObject *
+_PyLong_CopyObject(PyObject *src)
+{
+    return _PyLong_Copy((PyLongObject *)src);
+}
+
 /* Create a new int object from a C long int */
 
 PyObject *
@@ -5012,6 +5024,15 @@ PyTypeObject PyLong_Type = {
     0,                                          /* tp_alloc */
     long_new,                                   /* tp_new */
     PyObject_Del,                               /* tp_free */
+    0,                                          /* tp_is_gc */
+    0,                                          /* tp_bases */
+    0,                                          /* tp_mro */
+    0,                                          /* tp_cache */
+    0,                                          /* tp_subclasses */
+    0,                                          /* tp_weaklist */
+    0,                                          /* tp_del */
+    0,                                          /* tp_version_tag */
+    _PyLong_CopyObject,                         /* tp_copy */
 };
 
 static PyTypeObject Int_InfoType;
