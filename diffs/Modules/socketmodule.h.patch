diff --git a/Modules/socketmodule.h b/Modules/socketmodule.h
index 0435878..70db0e4 100644
--- a/Modules/socketmodule.h
+++ b/Modules/socketmodule.h
@@ -15,6 +15,9 @@
 #else /* MS_WINDOWS */
 # include <winsock2.h>
 # include <ws2tcpip.h>
+# ifdef WITH_PARALLEL
+#  include <MSWSock.h>
+# endif
 /* VC6 is shipped with old platform headers, and does not have MSTcpIP.h
  * Separate SDKs have all the functions we want, but older ones don't have
  * any version information.
@@ -111,6 +114,32 @@ typedef int SOCKET_T;
 #       define SIZEOF_SOCKET_T SIZEOF_INT
 #endif
 
+#ifdef WITH_PARALLEL
+#ifdef MS_WINDOWS
+static LPFN_ACCEPTEX _AcceptEx;
+static LPFN_CONNECTEX _ConnectEx;
+static LPFN_WSARECVMSG _WSARecvMsg;
+static LPFN_WSASENDMSG _WSASendMsg;
+static LPFN_DISCONNECTEX _DisconnectEx;
+static LPFN_TRANSMITFILE _TransmitFile;
+static LPFN_TRANSMITPACKETS _TransmitPackets;
+static LPFN_GETACCEPTEXSOCKADDRS _GetAcceptExSockaddrs;
+
+const static GUID _AcceptEx_GUID = WSAID_ACCEPTEX;
+const static GUID _ConnectEx_GUID = WSAID_CONNECTEX;
+const static GUID _WSARecvMsg_GUID = WSAID_WSARECVMSG;
+const static GUID _WSASendMsg_GUID = WSAID_WSASENDMSG;
+const static GUID _DisconnectEx_GUID = WSAID_DISCONNECTEX;
+const static GUID _TransmitFile_GUID = WSAID_TRANSMITFILE;
+const static GUID _TransmitPackets_GUID = WSAID_TRANSMITPACKETS;
+const static GUID _GetAcceptExSockaddrs_GUID = WSAID_GETACCEPTEXSOCKADDRS;
+
+static RIO_EXTENSION_FUNCTION_TABLE _rio = { 0, };
+const static GUID _rio_GUID = WSAID_MULTIPLE_RIO;
+
+#endif /* MS_WINDOWS */
+#endif /* WITH_PARALLEL */
+
 #if SIZEOF_SOCKET_T <= SIZEOF_LONG
 #define PyLong_FromSocket_t(fd) PyLong_FromLong((SOCKET_T)(fd))
 #define PyLong_AsSocket_t(fd) (SOCKET_T)PyLong_AsLong(fd)
@@ -165,6 +194,11 @@ typedef struct {
                                         sets a Python exception */
     double sock_timeout;                 /* Operation timeout in seconds;
                                         0.0 means non-blocking */
+#ifdef WITH_PARALLEL
+    int sock_backlog;           /* Backlog specified to listen(n). Used for
+                                   pre-allocating sockets for AcceptEx when
+                                   on Windows. */
+#endif
 } PySocketSockObject;
 
 /* --- C API ----------------------------------------------------*/
@@ -222,10 +256,50 @@ typedef struct {
     PyTypeObject *Sock_Type;
     PyObject *error;
     PyObject *timeout_error;
+#ifdef WITH_PARALLEL
+    int (*getsockaddrarg)(PySocketSockObject *s,
+                          PyObject *args,
+                          struct sockaddr *addr_ret,
+                          int *len_ret);
+    int (*getsockaddrlen)(PySocketSockObject *s, socklen_t *len_ret);
+    PyObject *(*makesockaddr)(SOCKET_T sockfd,
+                              struct sockaddr *addr,
+                              size_t addrlen,
+                              int proto);
+    PyObject *(*socket_errorhandler)(void);
+    PyObject *(*host_errorhandler)(int);
+    PyObject *(*gai_errorhandler)(int);
+#ifdef MS_WINDOWS
+    LPFN_ACCEPTEX AcceptEx;
+    LPFN_CONNECTEX ConnectEx;
+    LPFN_WSARECVMSG WSARecvMsg;
+    LPFN_WSASENDMSG WSASendMsg;
+    LPFN_DISCONNECTEX DisconnectEx;
+    LPFN_TRANSMITFILE TransmitFile;
+    LPFN_TRANSMITPACKETS TransmitPackets;
+    LPFN_GETACCEPTEXSOCKADDRS GetAcceptExSockaddrs;
+
+    RIO_EXTENSION_FUNCTION_TABLE rio;
+#else /* MS_WINDOWS */
+    void (*null01)(void); /* LPFN_ACCEPTEX             */
+    void (*null02)(void); /* LPFN_CONNECTEX            */
+    void (*null03)(void); /* LPFN_WSARECVMSG           */
+    void (*null04)(void); /* LPFN_WSASENDMSG           */
+    void (*null05)(void); /* LPFN_DISCONNECTEX         */
+    void (*null06)(void); /* LPFN_TRANSMITFILE         */
+    void (*null07)(void); /* LPFN_TRANSMITPACKETS      */
+    void (*null08)(void); /* LPFN_GETACCEPTEXSOCKADDRS */
+    // Erm, embedded the RIO struct is going to blow things up.
+    void (*null09)(void); /* RIO_EXTENSION_FUNCTION_TABLE */
+#endif /* MS_WINDOWS */
+#endif /* WITH_PARALLEL */
 } PySocketModule_APIObject;
 
 #define PySocketModule_ImportModuleAndAPI() PyCapsule_Import(PySocket_CAPSULE_NAME, 1)
 
+/* Convert "sock_addr_t *" to "struct sockaddr *". */
+#define SAS2SA(x)       (&((x)->sa))
+
 #ifdef __cplusplus
 }
 #endif
