diff --git a/Modules/_json.c b/Modules/_json.c
index 9166680..d830636 100644
--- a/Modules/_json.c
+++ b/Modules/_json.c
@@ -1,6 +1,7 @@
 #include "Python.h"
 #include "structmember.h"
 #include "accu.h"
+#include "statics.h"
 
 #if PY_VERSION_HEX < 0x02060000 && !defined(Py_TYPE)
 #define Py_TYPE(ob)     (((PyObject*)(ob))->ob_type)
@@ -27,6 +28,8 @@ typedef int Py_ssize_t;
 #define PyEncoder_Check(op) PyObject_TypeCheck(op, &PyEncoderType)
 #define PyEncoder_CheckExact(op) (Py_TYPE(op) == &PyEncoderType)
 
+static PyObject *errmsg_fn;
+
 static PyTypeObject PyScannerType;
 static PyTypeObject PyEncoderType;
 
@@ -81,13 +84,7 @@ static PyObject *
 join_list_unicode(PyObject *lst)
 {
     /* return u''.join(lst) */
-    static PyObject *sep = NULL;
-    if (sep == NULL) {
-        sep = PyUnicode_FromStringAndSize("", 0);
-        if (sep == NULL)
-            return NULL;
-    }
-    return PyUnicode_Join(sep, lst);
+    return PyUnicode_Join(statics.empty, lst);
 }
 
 /* Forward decls */
@@ -139,6 +136,24 @@ encoder_encode_float(PyEncoderObject *s, PyObject *obj);
 #define S_CHAR(c) (c >= ' ' && c <= '~' && c != '\\' && c != '"')
 #define IS_WHITESPACE(c) (((c) == ' ') || ((c) == '\t') || ((c) == '\n') || ((c) == '\r'))
 
+/* Dodgy hack. */
+static
+PyObject *
+py_init_errmsg(PyObject *obj)
+{
+    Py_GUARD();
+
+    if (errmsg_fn)
+        Py_CLEAR(errmsg_fn);
+
+    errmsg_fn = obj;
+    Py_INCREF(errmsg_fn);
+
+    Py_RETURN_NONE;
+}
+
+PyDoc_STRVAR(pydoc_init_errmsg, "initializes the error handler\n");
+
 static int
 _convertPyInt_AsSsize_t(PyObject *o, Py_ssize_t *size_ptr)
 {
@@ -257,17 +272,9 @@ raise_errmsg(char *msg, PyObject *s, Py_ssize_t end)
 {
     /* Use the Python function json.decoder.errmsg to raise a nice
     looking ValueError exception */
-    static PyObject *errmsg_fn = NULL;
     PyObject *pymsg;
-    if (errmsg_fn == NULL) {
-        PyObject *decoder = PyImport_ImportModule("json.decoder");
-        if (decoder == NULL)
-            return;
-        errmsg_fn = PyObject_GetAttrString(decoder, "errmsg");
-        Py_DECREF(decoder);
-        if (errmsg_fn == NULL)
-            return;
-    }
+    if (!errmsg_fn)
+        Py_FatalError("oops, json module forgot to call _json._init_errmsg()");
     pymsg = PyObject_CallFunction(errmsg_fn, "(zOO&)", msg, s, _convertPyInt_FromSsize_t, &end);
     if (pymsg) {
         PyErr_SetObject(PyExc_ValueError, pymsg);
@@ -1295,30 +1302,12 @@ static PyObject *
 _encoded_const(PyObject *obj)
 {
     /* Return the JSON string representation of None, True, False */
-    if (obj == Py_None) {
-        static PyObject *s_null = NULL;
-        if (s_null == NULL) {
-            s_null = PyUnicode_InternFromString("null");
-        }
-        Py_INCREF(s_null);
-        return s_null;
-    }
-    else if (obj == Py_True) {
-        static PyObject *s_true = NULL;
-        if (s_true == NULL) {
-            s_true = PyUnicode_InternFromString("true");
-        }
-        Py_INCREF(s_true);
-        return s_true;
-    }
-    else if (obj == Py_False) {
-        static PyObject *s_false = NULL;
-        if (s_false == NULL) {
-            s_false = PyUnicode_InternFromString("false");
-        }
-        Py_INCREF(s_false);
-        return s_false;
-    }
+    if (obj == Py_None)
+        return Py_STATIC(s_null);
+    else if (obj == Py_True)
+        return Py_STATIC(s_true);
+    else if (obj == Py_False)
+        return Py_STATIC(s_false);
     else {
         PyErr_SetString(PyExc_ValueError, "not a const");
         return NULL;
@@ -1336,13 +1325,13 @@ encoder_encode_float(PyEncoderObject *s, PyObject *obj)
             return NULL;
         }
         if (i > 0) {
-            return PyUnicode_FromString("Infinity");
+            return Py_STATIC(infinity);
         }
         else if (i < 0) {
-            return PyUnicode_FromString("-Infinity");
+            return Py_STATIC(neg_infinity);
         }
         else {
-            return PyUnicode_FromString("NaN");
+            return Py_STATIC(nan);
         }
     }
     /* Use a better float format here? */
@@ -1466,9 +1455,6 @@ encoder_listencode_dict(PyEncoderObject *s, _PyAccu *acc,
                         PyObject *dct, Py_ssize_t indent_level)
 {
     /* Encode Python dict dct a JSON term */
-    static PyObject *open_dict = NULL;
-    static PyObject *close_dict = NULL;
-    static PyObject *empty_dict = NULL;
     PyObject *kstr = NULL;
     PyObject *ident = NULL;
     PyObject *it = NULL;
@@ -1477,15 +1463,8 @@ encoder_listencode_dict(PyEncoderObject *s, _PyAccu *acc,
     int skipkeys;
     Py_ssize_t idx;
 
-    if (open_dict == NULL || close_dict == NULL || empty_dict == NULL) {
-        open_dict = PyUnicode_InternFromString("{");
-        close_dict = PyUnicode_InternFromString("}");
-        empty_dict = PyUnicode_InternFromString("{}");
-        if (open_dict == NULL || close_dict == NULL || empty_dict == NULL)
-            return -1;
-    }
     if (Py_SIZE(dct) == 0)
-        return _PyAccu_Accumulate(acc, empty_dict);
+        return _PyAccu_Accumulate(acc, statics.empty_dict);
 
     if (s->markers != Py_None) {
         int has_key;
@@ -1503,7 +1482,7 @@ encoder_listencode_dict(PyEncoderObject *s, _PyAccu *acc,
         }
     }
 
-    if (_PyAccu_Accumulate(acc, open_dict))
+    if (_PyAccu_Accumulate(acc, statics.open_dict))
         goto bail;
 
     if (s->indent != Py_None) {
@@ -1627,7 +1606,7 @@ encoder_listencode_dict(PyEncoderObject *s, _PyAccu *acc,
 
         yield '\n' + (' ' * (_indent * _current_indent_level))
     }*/
-    if (_PyAccu_Accumulate(acc, close_dict))
+    if (_PyAccu_Accumulate(acc, statics.close_dict))
         goto bail;
     return 0;
 
@@ -1645,27 +1624,17 @@ encoder_listencode_list(PyEncoderObject *s, _PyAccu *acc,
                         PyObject *seq, Py_ssize_t indent_level)
 {
     /* Encode Python list seq to a JSON term */
-    static PyObject *open_array = NULL;
-    static PyObject *close_array = NULL;
-    static PyObject *empty_array = NULL;
     PyObject *ident = NULL;
     PyObject *s_fast = NULL;
     Py_ssize_t i;
 
-    if (open_array == NULL || close_array == NULL || empty_array == NULL) {
-        open_array = PyUnicode_InternFromString("[");
-        close_array = PyUnicode_InternFromString("]");
-        empty_array = PyUnicode_InternFromString("[]");
-        if (open_array == NULL || close_array == NULL || empty_array == NULL)
-            return -1;
-    }
     ident = NULL;
     s_fast = PySequence_Fast(seq, "_iterencode_list needs a sequence");
     if (s_fast == NULL)
         return -1;
     if (PySequence_Fast_GET_SIZE(s_fast) == 0) {
         Py_DECREF(s_fast);
-        return _PyAccu_Accumulate(acc, empty_array);
+        return _PyAccu_Accumulate(acc, statics.empty_array);
     }
 
     if (s->markers != Py_None) {
@@ -1684,7 +1653,7 @@ encoder_listencode_list(PyEncoderObject *s, _PyAccu *acc,
         }
     }
 
-    if (_PyAccu_Accumulate(acc, open_array))
+    if (_PyAccu_Accumulate(acc, statics.open_array))
         goto bail;
     if (s->indent != Py_None) {
         /* TODO: DOES NOT RUN */
@@ -1716,7 +1685,7 @@ encoder_listencode_list(PyEncoderObject *s, _PyAccu *acc,
 
         yield '\n' + (' ' * (_indent * _current_indent_level))
     }*/
-    if (_PyAccu_Accumulate(acc, close_array))
+    if (_PyAccu_Accumulate(acc, statics.close_array))
         goto bail;
     Py_DECREF(s_fast);
     return 0;
@@ -1824,6 +1793,11 @@ static PyMethodDef speedups_methods[] = {
         (PyCFunction)py_scanstring,
         METH_VARARGS,
         pydoc_scanstring},
+    /* Dodgy hack to allow us to resolve errmsg from json.decode. */
+    {"_init_errmsg",
+        (PyCFunction)py_init_errmsg,
+        METH_O,
+        pydoc_init_errmsg},
     {NULL, NULL, 0, NULL}
 };
 
