diff --git a/Include/object.h b/Include/object.h
--- a/Include/object.h
+++ b/Include/object.h
@@ -51,7 +51,7 @@ A standard interface exists for objects 
 whose size is determined when the object is allocated.
 */
 
-/* Py_DEBUG implies Py_TRACE_REFS. */
+/* Py_DEBUG implies Py_TRACE_REFS */
 #if defined(Py_DEBUG) && !defined(Py_TRACE_REFS)
 #define Py_TRACE_REFS
 #endif
@@ -65,6 +65,7 @@ whose size is determined when the object
 #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
 #endif
 
+#ifndef WITH_PARALLEL
 #ifdef Py_TRACE_REFS
 /* Define pointers to support a doubly-linked list of all live heap objects. */
 #define _PyObject_HEAD_EXTRA            \
@@ -73,10 +74,69 @@ whose size is determined when the object
 
 #define _PyObject_EXTRA_INIT 0, 0,
 
-#else
+#else /* Py_TRACE_REFS */
 #define _PyObject_HEAD_EXTRA
 #define _PyObject_EXTRA_INIT
+#endif /* Py_TRACE_REFS */
+#else /* !WITH_PARALLEL */
+/* We use _ob_next/_ob_prev in parallel contexts, so if we're WITH_PARALLEL,
+ * we always include these two pointers, regardless of Py_TRACE_REFS. */
+
+#define _Py_NOT_PARALLEL ((void *)_Py_DEADBEEF)
+#define _Py_IS_PARALLEL  ((void *)_Px_DEADBEEF)
+
+#ifdef MS_WINDOWS
+/* So dodgy putting this in object.h. */
+#ifdef _WIN64
+#pragma warning(push)
+#pragma warning(disable:4324)   // structure padded due to align()
+typedef struct __declspec(align(16)) _Py_SLIST_ENTRY *Py_PSLIST_ENTRY;
+typedef struct __declspec(align(16)) _Py_SLIST_ENTRY {
+    Py_PSLIST_ENTRY Next;
+} Py_SLIST_ENTRY;
+#pragma warning(pop)
+
+typedef struct _Py_SLIST_ENTRY32 {
+    unsigned long Next;
+} Py_SLIST_ENTRY32, *Py_PSLIST_ENTRY32;
+
+#else
+typedef struct _Py_SINGLE_LIST_ENTRY {
+    struct _Py_SINGLE_LIST_ENTRY *Next;
+} Py_SINGLE_LIST_ENTRY, *Py_PSINGLE_LIST_ENTRY;
+
+#define Py_SLIST_ENTRY Py_SINGLE_LIST_ENTRY
+#define _Py_SLIST_ENTRY _Py_SINGLE_LIST_ENTRY
+#define Py_PSLIST_ENTRY Py_PSINGLE_LIST_ENTRY
+
+typedef Py_SLIST_ENTRY Py_SLIST_ENTRY32, *Py_PSLIST_ENTRY32;
 #endif
+#endif
+
+#define _PyObject_HEAD_EXTRA            \
+    void   *is_px;                      \
+    void   *px;                         \
+    Py_SLIST_ENTRY slist_entry;         \
+    size_t  px_flags;                   \
+    void   *srw_lock;                   \
+    void   *event;                      \
+    void   *orig_type;                  \
+    struct _object *_ob_next;           \
+    struct _object *_ob_prev;
+
+#define _PyObject_EXTRA_INIT            \
+    (void *)_Py_NOT_PARALLEL,           \
+    (void *)_Py_NOT_PARALLEL,           \
+    NULL,                               \
+    Py_PXFLAGS_ISPY,                    \
+    NULL,                               \
+    NULL,                               \
+    NULL,                               \
+    (struct _object *)_Py_NOT_PARALLEL, \
+    (struct _object *)_Py_NOT_PARALLEL,
+
+#endif /* WITH_PARALLEL */
+
 
 /* PyObject_HEAD defines the initial segment of every PyObject. */
 #define PyObject_HEAD                   PyObject ob_base;
@@ -115,6 +175,8 @@ typedef struct {
 
 #define Py_REFCNT(ob)           (((PyObject*)(ob))->ob_refcnt)
 #define Py_TYPE(ob)             (((PyObject*)(ob))->ob_type)
+#define Py_ORIG_TYPE(ob)        (((PyObject*)(ob))->orig_type)
+#define Py_ORIG_TYPE_CAST(ob)   ((PyTypeObject *)(((PyObject*)(ob))->orig_type))
 #define Py_SIZE(ob)             (((PyVarObject*)(ob))->ob_size)
 
 /********************* String Literals ****************************************/
@@ -143,7 +205,12 @@ typedef struct _Py_Identifier {
     PyObject *object;
 } _Py_Identifier;
 
+#ifndef WITH_PARALLEL
 #define _Py_static_string(varname, value)  static _Py_Identifier varname = { 0, value, 0 }
+#else
+#define _Py_static_string(varname, value)  Py_TLS static _Py_Identifier varname = { 0, value, 0 }
+#endif
+
 #define _Py_IDENTIFIER(varname) _Py_static_string(PyId_##varname, #varname)
 
 /*
@@ -706,6 +773,7 @@ PyAPI_FUNC(void) _Py_NegativeRefcount(co
 PyAPI_FUNC(PyObject *) _PyDict_Dummy(void);
 PyAPI_FUNC(PyObject *) _PySet_Dummy(void);
 PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
+#ifndef WITH_PARALLEL
 #define _Py_INC_REFTOTAL        _Py_RefTotal++
 #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 #define _Py_REF_DEBUG_COMMA     ,
@@ -714,7 +782,16 @@ PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(v
                 _Py_NegativeRefcount(__FILE__, __LINE__,        \
                                      (PyObject *)(OP));         \
 }
-#else
+#else  /* WITH_PARALLEL */
+#define _Py_INC_REFTOTAL        (Py_PXCTX() ? (void)0 : _Py_RefTotal++)
+#define _Py_DEC_REFTOTAL        (Py_PXCTX() ? (void)0 : _Py_RefTotal--)
+#define _Py_REF_DEBUG_COMMA     ,
+#define _Py_CHECK_REFCNT(OP) {                                      \
+    if (!Py_ISPX(OP) && ((PyObject*)OP)->ob_refcnt < 0)             \
+        _Py_NegativeRefcount(__FILE__, __LINE__, (PyObject *)(OP)); \
+}
+#endif /* WITH_PARALLEL */
+#else  /* Py_REF_DEBUG */
 #define _Py_INC_REFTOTAL
 #define _Py_DEC_REFTOTAL
 #define _Py_REF_DEBUG_COMMA
@@ -724,17 +801,46 @@ PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(v
 #ifdef COUNT_ALLOCS
 PyAPI_FUNC(void) inc_count(PyTypeObject *);
 PyAPI_FUNC(void) dec_count(PyTypeObject *);
+#ifndef WITH_PARALLEL
 #define _Py_INC_TPALLOCS(OP)    inc_count(Py_TYPE(OP))
 #define _Py_INC_TPFREES(OP)     dec_count(Py_TYPE(OP))
 #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 #define _Py_COUNT_ALLOCS_COMMA  ,
+#else  /* !WITH_PARALLEL */
+#ifdef Py_DEBUG
+#define _Py_INC_TPALLOCS(OP) (Py_ISPX(OP) ? (void)0 : inc_count(Py_TYPE(OP)))
+#define _Py_INC_TPFREES(OP)  (Py_ISPX(OP) ? (void)0 : dec_count(Py_TYPE(OP)))
+#define _Py_DEC_TPFREES(OP)  (Py_ISPX(OP) ? (void)0 : Py_TYPE(OP)->tp_frees--)
 #else
+#define _Py_INC_TPALLOCS(OP) (                          \
+    Py_PXCTX() ? (void)0 : (                            \
+        Py_ISPX(OP) ? (void)0 : inc_count(Py_TYPE(OP))  \
+    )                                                   \
+)
+#define _Py_INC_TPFREES(OP) (                           \
+    Py_PXCTX() ? (void)0 : (                            \
+        Py_ISPX(OP) ? (void)0 : dec_count(Py_TYPE(OP))  \
+    )                                                   \
+)
+#define _Py_DEC_TPFREES(OP) (                           \
+    Py_PXCTX() ? (void)0 : (                            \
+        Py_ISPX(OP) ? (void)0 : Py_TYPE(OP)->tp_frees-- \
+    )                                                   \
+)
+#endif
+#define _Py_COUNT_ALLOCS_COMMA  ,
+#endif /* !WITH_PARALLEL */
+#else  /* COUNT_ALLOCS */
 #define _Py_INC_TPALLOCS(OP)
 #define _Py_INC_TPFREES(OP)
 #define _Py_DEC_TPFREES(OP)
 #define _Py_COUNT_ALLOCS_COMMA
 #endif /* COUNT_ALLOCS */
 
+#ifdef WITH_PARALLEL
+PyAPI_FUNC(void) _Px_Dealloc(PyObject *);
+#endif
+
 #ifdef Py_TRACE_REFS
 /* Py_TRACE_REFS is such major surgery that we call external routines. */
 PyAPI_FUNC(void) _Py_NewReference(PyObject *);
@@ -748,22 +854,72 @@ PyAPI_FUNC(void) _Py_AddToAllObjects(PyO
 /* Without Py_TRACE_REFS, there's little enough to do that we expand code
  * inline.
  */
+#ifndef WITH_PARALLEL
 #define _Py_NewReference(op) (                          \
     _Py_INC_TPALLOCS(op) _Py_COUNT_ALLOCS_COMMA         \
     _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA               \
     Py_REFCNT(op) = 1)
+#define _Py_ForgetReference(op) _Py_INC_TPFREES(op)
+#else
+#ifdef Py_DEBUG
+#define _Py_NewReference(op)                        \
+    (Py_ISPX(op) ? (_Px_NewReference(op)) : (       \
+        _Py_INC_TPALLOCS(op) _Py_COUNT_ALLOCS_COMMA \
+        _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA       \
+        Py_REFCNT(op) = 1))
+#else
+#define _Py_NewReference(op) (                          \
+    (Py_PXCTX() ? (_Px_NewReference(op)) : (            \
+        (Py_ISPX(op) ? (_Px_NewReference(op)) : (       \
+            _Py_INC_TPALLOCS(op) _Py_COUNT_ALLOCS_COMMA \
+            _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA       \
+            Py_REFCNT(op) = 1                           \
+        ))                                              \
+    ))                                                  \
+)
+#endif
 
-#define _Py_ForgetReference(op) _Py_INC_TPFREES(op)
+#define _Py_ForgetReference(op)                     \
+    do {                                            \
+        if (Py_PXCTX())                             \
+            _Px_ForgetReference(op);                \
+        else                                        \
+            _Py_INC_TPFREES(op);                    \
+        break;                                      \
+    } while (0)
+
+#endif /* WITH_PARALLEL */
 
 #ifdef Py_LIMITED_API
 PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 #else
+#ifndef WITH_PARALLEL
 #define _Py_Dealloc(op) (                               \
     _Py_INC_TPFREES(op) _Py_COUNT_ALLOCS_COMMA          \
     (*Py_TYPE(op)->tp_dealloc)((PyObject *)(op)))
+#else
+
+#ifdef Py_DEBUG
+#define _Py_Dealloc(op)                             \
+    (Py_ISPX(op) ? _Px_Dealloc(op) : (              \
+        _Py_INC_TPFREES(op) _Py_COUNT_ALLOCS_COMMA  \
+        (*Py_TYPE(op)->tp_dealloc)((PyObject *)(op))))
+#else
+#define _Py_Dealloc(op) (                                   \
+    (Py_PXCTX() ? (_Px_Dealloc(op)) : (                     \
+        (Py_ISPX(op) ? (_Px_Dealloc(op)) : (                \
+            _Py_INC_TPFREES(op) _Py_COUNT_ALLOCS_COMMA      \
+            (*Py_TYPE(op)->tp_dealloc)((PyObject *)(op))    \
+        ))                                                  \
+    ))                                                      \
+)
 #endif
+
+#endif /* WITH_PARALLEL */
+#endif /* Py_LIMITED_API */
 #endif /* !Py_TRACE_REFS */
 
+#ifndef WITH_PARALLEL
 #define Py_INCREF(op) (                         \
     _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA       \
     ((PyObject*)(op))->ob_refcnt++)
@@ -777,6 +933,78 @@ PyAPI_FUNC(void) _Py_Dealloc(PyObject *)
         _Py_Dealloc((PyObject *)(op));                  \
     } while (0)
 
+#else /* !WITH_PARALLEL */
+
+PyAPI_FUNC(void) Px_DecRef(PyObject *o);
+#ifndef Py_LIMITED_API
+#define Px_DECREF(o) (Px_DecRef((PyObject *)o))
+#endif
+
+__inline
+void
+_Py_IncRef(PyObject *op)
+{
+#if defined(Py_DEBUG)
+    _PyParallel_IncRef(op);
+#else
+    if ((!Py_PXCTX() && (Py_ISPY(op) || Px_PERSISTED(op)))) {
+        _Py_INC_REFTOTAL;
+        (((PyObject*)(op))->ob_refcnt++);
+    }
+#endif
+}
+
+#define Py_INCREF(op) (_Py_IncRef((PyObject *)op))
+#define __Py_INCREF(op)                                       \
+    (!(!Py_PXCTX() && (Py_ISPY(op) || Px_PERSISTED(op))) ?    \
+        ((void)0) : (                                         \
+            _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA             \
+            (((PyObject*)(op))->ob_refcnt++)                  \
+        )                                                     \
+    )
+
+__inline
+void
+_Py_DecRef(PyObject *op)
+{
+#if defined(Py_DEBUG)
+    _PyParallel_DecRef(op);
+#else
+    if (!Py_PXCTX()) {
+        if (Px_PERSISTED(op) || Px_CLONED(op))
+            Px_DECREF(op);
+        else if (!Px_ISPX(op)) {
+            _Py_DEC_REFTOTAL;
+            if ((--((PyObject *)(op))->ob_refcnt) != 0) {
+                _Py_CHECK_REFCNT(op);
+            } else
+                _Py_Dealloc((PyObject *)(op));
+        }
+    }
+#endif
+}
+
+#define Py_DECREF(op) (_Py_DecRef((PyObject *)op))
+
+#define __Py_DECREF(op)                                       \
+    do {                                                      \
+        if (!Py_PXCTX()) {                                    \
+            if (Px_PERSISTED(op))                             \
+                Px_DECREF(op);                                \
+            else if (!Px_ISPX(op)) {                          \
+                _Py_DEC_REFTOTAL;                             \
+                if ((--((PyObject *)(op))->ob_refcnt) != 0) { \
+                    _Py_CHECK_REFCNT(op);                     \
+                } else {                                      \
+                    _Py_Dealloc((PyObject *)(op));            \
+                }                                             \
+            }                                                 \
+        }                                                     \
+    } while (0)
+
+
+#endif /* WITH_PARALLEL */
+
 /* Safely decref `op` and set `op` to NULL, especially useful in tp_clear
  * and tp_dealloc implementatons.
  *
@@ -830,6 +1058,12 @@ they can have object code that is not de
 */
 PyAPI_FUNC(void) Py_IncRef(PyObject *);
 PyAPI_FUNC(void) Py_DecRef(PyObject *);
+#ifdef WITH_PARALLEL
+PyAPI_FUNC(void) Px_DecRef(PyObject *o);
+#ifndef Py_LIMITED_API
+#define Px_DECREF(o) (Px_DecRef((PyObject *)o))
+#endif
+#endif
 
 PyAPI_DATA(PyTypeObject) _PyNone_Type;
 PyAPI_DATA(PyTypeObject) _PyNotImplemented_Type;
@@ -870,6 +1104,16 @@ PyAPI_DATA(PyObject) _Py_NotImplementedS
  */
 PyAPI_DATA(int) _Py_SwappedOp[];
 
+#ifdef WITH_PARALLEL
+/*
+ * AssignmentError is raised when we can detect that a parallel thread is
+ * attempting to mutate a main thread object.  This is definitely not
+ * foolproof, but it'll catch simple things.
+ */
+PyAPI_DATA(PyObject *) PyExc_AssignmentError;
+#endif
+
+PyAPI_FUNC(void) PyErr_SetNone(PyObject *);
 
 /*
 More conventions
@@ -980,7 +1224,9 @@ PyAPI_FUNC(void) _PyTrash_thread_destroy
 
 #define Py_TRASHCAN_SAFE_BEGIN(op) \
     do { \
-        PyThreadState *_tstate = PyThreadState_GET(); \
+        PyThreadState *_tstate; \
+        Py_GUARD(); \
+        _tstate = PyThreadState_GET(); \
         if (_tstate->trash_delete_nesting < PyTrash_UNWIND_LEVEL) { \
             ++_tstate->trash_delete_nesting;
             /* The body of the deallocator is here. */
