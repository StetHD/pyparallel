diff --git a/Include/object.h b/Include/object.h
index cdeb06c..5fd128c 100644
--- a/Include/object.h
+++ b/Include/object.h
@@ -51,8 +51,8 @@ A standard interface exists for objects that contain an array of items
 whose size is determined when the object is allocated.
 */
 
-/* Py_DEBUG implies Py_TRACE_REFS. */
-#if defined(Py_DEBUG) && !defined(Py_TRACE_REFS)
+/* Py_DEBUG implies Py_TRACE_REFS */
+#if defined(Py_DEBUG) && !defined(Py_TRACE_REFS) && !defined(WITH_PARALLEL)
 #define Py_TRACE_REFS
 #endif
 
@@ -65,6 +65,8 @@ whose size is determined when the object is allocated.
 #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
 #endif
 
+#ifndef WITH_PARALLEL
+#error Detected WITH_PARALLEL not defined
 #ifdef Py_TRACE_REFS
 /* Define pointers to support a doubly-linked list of all live heap objects. */
 #define _PyObject_HEAD_EXTRA            \
@@ -73,10 +75,27 @@ whose size is determined when the object is allocated.
 
 #define _PyObject_EXTRA_INIT 0, 0,
 
-#else
+#else /* Py_TRACE_REFS */
 #define _PyObject_HEAD_EXTRA
 #define _PyObject_EXTRA_INIT
-#endif
+#endif /* Py_TRACE_REFS */
+#else /* !WITH_PARALLEL */
+
+#define _Py_NOT_PARALLEL ((void *)_Py_DEADBEEF)
+#define _Py_IS_PARALLEL  ((void *)_Px_DEADBEEF)
+
+#define _PyObject_HEAD_EXTRA            \
+    void   *is_px;                      \
+    size_t  px_flags;                   \
+    struct _typeobject *orig_type;
+
+#define _PyObject_EXTRA_INIT            \
+    (void *)_Py_NOT_PARALLEL,           \
+    Py_PXFLAGS_ISPY,                    \
+    NULL,
+
+#endif /* WITH_PARALLEL */
+
 
 /* PyObject_HEAD defines the initial segment of every PyObject. */
 #define PyObject_HEAD                   PyObject ob_base;
@@ -115,6 +134,8 @@ typedef struct {
 
 #define Py_REFCNT(ob)           (((PyObject*)(ob))->ob_refcnt)
 #define Py_TYPE(ob)             (((PyObject*)(ob))->ob_type)
+#define Py_ORIG_TYPE(ob)        (((PyObject*)(ob))->orig_type)
+#define Py_ORIG_TYPE_CAST(ob)   ((PyTypeObject *)(((PyObject*)(ob))->orig_type))
 #define Py_SIZE(ob)             (((PyVarObject*)(ob))->ob_size)
 
 /********************* String Literals ****************************************/
@@ -326,6 +348,7 @@ typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
+typedef PyObject *(*copyfunc) (PyObject *);
 
 #ifdef Py_LIMITED_API
 typedef struct _typeobject PyTypeObject; /* opaque */
@@ -408,6 +431,8 @@ typedef struct _typeobject {
     /* Type attribute cache version tag. Added in version 2.6 */
     unsigned int tp_version_tag;
 
+    copyfunc tp_copy;
+
 #ifdef COUNT_ALLOCS
     /* these must be last and never explicitly initialized */
     Py_ssize_t tp_allocs;
@@ -528,6 +553,8 @@ PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 PyAPI_FUNC(int) PyObject_Not(PyObject *);
 PyAPI_FUNC(int) PyCallable_Check(PyObject *);
+PyAPI_FUNC(int) PyObject_Copyable(PyObject *);
+PyAPI_FUNC(PyObject *) PyObject_Copy(PyObject *);
 
 PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 
@@ -625,6 +652,10 @@ given type object has a specified feature.
 #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 #endif
 
+/* PyParallel will call tp_dealloc() against this type when
+   rewinding a heap. */
+#define Py_TPFLAGS_PX_DEALLOC (1L<<17)
+
 /* Objects support type attribute cache */
 #define Py_TPFLAGS_HAVE_VERSION_TAG   (1L<<18)
 #define Py_TPFLAGS_VALID_VERSION_TAG  (1L<<19)
@@ -706,6 +736,7 @@ PyAPI_FUNC(void) _Py_NegativeRefcount(const char *fname,
 PyAPI_FUNC(PyObject *) _PyDict_Dummy(void);
 PyAPI_FUNC(PyObject *) _PySet_Dummy(void);
 PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
+#ifndef WITH_PARALLEL
 #define _Py_INC_REFTOTAL        _Py_RefTotal++
 #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 #define _Py_REF_DEBUG_COMMA     ,
@@ -714,7 +745,16 @@ PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
                 _Py_NegativeRefcount(__FILE__, __LINE__,            \
                                      (PyObject *)(OP));             \
 }
-#else
+#else  /* WITH_PARALLEL */
+#define _Py_INC_REFTOTAL        (Py_PXCTX() ? (void)0 : _Py_RefTotal++)
+#define _Py_DEC_REFTOTAL        (Py_PXCTX() ? (void)0 : _Py_RefTotal--)
+#define _Py_REF_DEBUG_COMMA     ,
+#define _Py_CHECK_REFCNT(OP) {                                      \
+    if (!Py_ISPX(OP) && ((PyObject*)OP)->ob_refcnt < 0)             \
+        _Py_NegativeRefcount(__FILE__, __LINE__, (PyObject *)(OP)); \
+}
+#endif /* WITH_PARALLEL */
+#else  /* Py_REF_DEBUG */
 #define _Py_INC_REFTOTAL
 #define _Py_DEC_REFTOTAL
 #define _Py_REF_DEBUG_COMMA
@@ -724,58 +764,61 @@ PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 #ifdef COUNT_ALLOCS
 PyAPI_FUNC(void) inc_count(PyTypeObject *);
 PyAPI_FUNC(void) dec_count(PyTypeObject *);
+#ifndef WITH_PARALLEL
 #define _Py_INC_TPALLOCS(OP)    inc_count(Py_TYPE(OP))
 #define _Py_INC_TPFREES(OP)     dec_count(Py_TYPE(OP))
 #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 #define _Py_COUNT_ALLOCS_COMMA  ,
+#else  /* !WITH_PARALLEL */
+#ifdef Py_DEBUG
+#define _Py_INC_TPALLOCS(OP) (Py_ISPX(OP) ? (void)0 : inc_count(Py_TYPE(OP)))
+#define _Py_INC_TPFREES(OP)  (Py_ISPX(OP) ? (void)0 : dec_count(Py_TYPE(OP)))
+#define _Py_DEC_TPFREES(OP)  (Py_ISPX(OP) ? (void)0 : Py_TYPE(OP)->tp_frees--)
 #else
+#define _Py_INC_TPALLOCS(OP) (                          \
+    Py_PXCTX() ? (void)0 : (                            \
+        Py_ISPX(OP) ? (void)0 : inc_count(Py_TYPE(OP))  \
+    )                                                   \
+)
+#define _Py_INC_TPFREES(OP) (                           \
+    Py_PXCTX() ? (void)0 : (                            \
+        Py_ISPX(OP) ? (void)0 : dec_count(Py_TYPE(OP))  \
+    )                                                   \
+)
+#define _Py_DEC_TPFREES(OP) (                           \
+    Py_PXCTX() ? (void)0 : (                            \
+        Py_ISPX(OP) ? (void)0 : Py_TYPE(OP)->tp_frees-- \
+    )                                                   \
+)
+#endif
+#define _Py_COUNT_ALLOCS_COMMA  ,
+#endif /* !WITH_PARALLEL */
+#else  /* COUNT_ALLOCS */
 #define _Py_INC_TPALLOCS(OP)
 #define _Py_INC_TPFREES(OP)
 #define _Py_DEC_TPFREES(OP)
 #define _Py_COUNT_ALLOCS_COMMA
 #endif /* COUNT_ALLOCS */
 
-#ifdef Py_TRACE_REFS
+#ifdef WITH_PARALLEL
+PyAPI_FUNC(void) _Px_Dealloc(PyObject *);
+#endif
+
+#if defined(Py_TRACE_REFS) || defined(WITH_PARALLEL)
 /* Py_TRACE_REFS is such major surgery that we call external routines. */
 PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
-PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
+#ifndef WITH_PARALLEL
 PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
-
-#else
-/* Without Py_TRACE_REFS, there's little enough to do that we expand code
- * inline.
- */
-#define _Py_NewReference(op) (                          \
-    _Py_INC_TPALLOCS(op) _Py_COUNT_ALLOCS_COMMA         \
-    _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA               \
-    Py_REFCNT(op) = 1)
-
-#define _Py_ForgetReference(op) _Py_INC_TPFREES(op)
-
-#ifdef Py_LIMITED_API
-PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
-#else
-#define _Py_Dealloc(op) (                               \
-    _Py_INC_TPFREES(op) _Py_COUNT_ALLOCS_COMMA          \
-    (*Py_TYPE(op)->tp_dealloc)((PyObject *)(op)))
 #endif
-#endif /* !Py_TRACE_REFS */
+#endif
 
-#define Py_INCREF(op) (                         \
-    _Py_INC_REFTOTAL  _Py_REF_DEBUG_COMMA       \
-    ((PyObject*)(op))->ob_refcnt++)
+PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 
-#define Py_DECREF(op)                                   \
-    do {                                                \
-        if (_Py_DEC_REFTOTAL  _Py_REF_DEBUG_COMMA       \
-        --((PyObject*)(op))->ob_refcnt != 0)            \
-            _Py_CHECK_REFCNT(op)                        \
-        else                                            \
-        _Py_Dealloc((PyObject *)(op));                  \
-    } while (0)
+PyAPI_FUNC(void) Px_DecRef(PyObject *o);
+#define Px_DECREF(o) (Px_DecRef((PyObject *)o))
 
 /* Safely decref `op` and set `op` to NULL, especially useful in tp_clear
  * and tp_dealloc implementatons.
@@ -820,9 +864,31 @@ PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
         }                                         \
     } while (0)
 
+#define Py_ODECREF(op)                                        \
+    do {                                                      \
+        if (_Py_DEC_REFTOTAL  _Py_REF_DEBUG_COMMA             \
+        --((PyObject*)(op))->ob_refcnt != 0)                  \
+            _Py_CHECK_REFCNT(op)                              \
+        else                                                  \
+        _Py_Dealloc((PyObject *)(op));                        \
+    } while (0)
+
+
+/* Use when Py_PXCTX() won't work, e.g. thread shutdown. */
+#define Py_OCLEAR(op)                             \
+    do {                                          \
+        if (op) {                                 \
+            PyObject *_py_tmp = (PyObject *)(op); \
+            (op) = NULL;                          \
+            Py_ODECREF(_py_tmp);                  \
+        }                                         \
+    } while (0)
+
+
 /* Macros to use in case the object pointer may be NULL: */
 #define Py_XINCREF(op)  do { if ((op) == NULL) ; else Py_INCREF(op);  } while (0)
 #define Py_XDECREF(op)  do { if ((op) == NULL) ; else Py_DECREF(op);  } while (0)
+#define Py_OXDECREF(op) do { if ((op) == NULL) ; else Py_ODECREF(op); } while (0)
 
 /*
 These are provided as conveniences to Python runtime embedders, so that
@@ -831,6 +897,9 @@ they can have object code that is not dependent on Python compilation flags.
 PyAPI_FUNC(void) Py_IncRef(PyObject *);
 PyAPI_FUNC(void) Py_DecRef(PyObject *);
 
+#define Py_INCREF(op) (Py_IncRef((PyObject *)op))
+#define Py_DECREF(op) (Py_DecRef((PyObject *)op))
+
 PyAPI_DATA(PyTypeObject) _PyNone_Type;
 PyAPI_DATA(PyTypeObject) _PyNotImplemented_Type;
 
@@ -870,6 +939,16 @@ PyAPI_DATA(PyObject) _Py_NotImplementedStruct; /* Don't use this directly */
  */
 PyAPI_DATA(int) _Py_SwappedOp[];
 
+#ifdef WITH_PARALLEL
+/*
+ * AssignmentError is raised when we can detect that a parallel thread is
+ * attempting to mutate a main thread object.  This is definitely not
+ * foolproof, but it'll catch simple things.
+ */
+PyAPI_DATA(PyObject *) PyExc_AssignmentError;
+#endif
+
+PyAPI_FUNC(void) PyErr_SetNone(PyObject *);
 
 /*
 More conventions
@@ -980,7 +1059,9 @@ PyAPI_FUNC(void) _PyTrash_thread_destroy_chain(void);
 
 #define Py_TRASHCAN_SAFE_BEGIN(op) \
     do { \
-        PyThreadState *_tstate = PyThreadState_GET(); \
+        PyThreadState *_tstate; \
+        Py_GUARD(); \
+        _tstate = PyThreadState_GET(); \
         if (_tstate->trash_delete_nesting < PyTrash_UNWIND_LEVEL) { \
             ++_tstate->trash_delete_nesting;
             /* The body of the deallocator is here. */
