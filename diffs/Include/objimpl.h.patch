diff --git a/Include/objimpl.h b/Include/objimpl.h
index c6b7df4..62f9dde 100644
--- a/Include/objimpl.h
+++ b/Include/objimpl.h
@@ -140,6 +140,22 @@ PyAPI_FUNC(void) _PyMem_DebugFree(void *p);
 #define PyObject_Del            PyObject_Free
 #define PyObject_DEL            PyObject_FREE
 
+#ifdef WITH_PARALLEL
+PyAPI_FUNC(int) _PyMem_InRange(void *p);
+
+PyAPI_FUNC(void *) _PxMem_Malloc(size_t n);
+PyAPI_FUNC(void *) _PxMem_Realloc(void *p, size_t n);
+PyAPI_FUNC(void)   _PxMem_Free(void *p);
+
+PyAPI_FUNC(PyObject *) _PxObject_Malloc(size_t n);
+/*
+PyAPI_FUNC(void *) _PxObject_Realloc(void *p, size_t n);
+PyAPI_FUNC(void)   _PxObject_Free(void *p);
+*/
+PyAPI_FUNC(PyObject *) _PyObject_FromPxObject(PyObject *op);
+PyAPI_FUNC(PyObject *) _PyObject_ToPxObject(PyObject *op);
+#endif /* WITH_PARALLEL */
+
 /*
  * Generic object allocator interface
  * ==================================
@@ -148,7 +164,11 @@ PyAPI_FUNC(void) _PyMem_DebugFree(void *p);
 /* Functions */
 PyAPI_FUNC(PyObject *) PyObject_Init(PyObject *, PyTypeObject *);
 PyAPI_FUNC(PyVarObject *) PyObject_InitVar(PyVarObject *,
-                                                 PyTypeObject *, Py_ssize_t);
+                                           PyTypeObject *,
+                                           Py_ssize_t);
+PyAPI_FUNC(void) _PyObject_InitHead(PyObject *op);
+PyAPI_FUNC(void) _PyObject_VerifyHead(PyObject *op);
+
 PyAPI_FUNC(PyObject *) _PyObject_New(PyTypeObject *);
 PyAPI_FUNC(PyVarObject *) _PyObject_NewVar(PyTypeObject *, Py_ssize_t);
 
@@ -157,12 +178,34 @@ PyAPI_FUNC(PyVarObject *) _PyObject_NewVar(PyTypeObject *, Py_ssize_t);
 #define PyObject_NewVar(type, typeobj, n)                            \
                 ( (type *) _PyObject_NewVar((typeobj), (n)) )
 
-/* Macros trading binary compatibility for speed. See also pymem.h.
-   Note that these macros expect non-NULL object pointers.*/
-#define PyObject_INIT(op, typeobj) \
-    ( Py_TYPE(op) = (typeobj), _Py_NewReference((PyObject *)(op)), (op) )
-#define PyObject_INIT_VAR(op, typeobj, size) \
-    ( Py_SIZE(op) = (size), PyObject_INIT((op), (typeobj)) )
+#define PyObject_NEW(type, tp) ((type *)_PyObject_New(tp))
+#define PyObject_NEW_VAR(type, tp, n) ((type *)_PyObject_NewVar(tp, n))
+
+#define PyObject_INIT(op, tp)                   \
+    (PyObject_Init((PyObject *)(op),            \
+                    (PyTypeObject *)(tp)))
+
+#define PyObject_INIT_VAR(op, tp, n)            \
+    (PyObject_InitVar((PyVarObject *)(op),      \
+                       (PyTypeObject *)(tp),    \
+                       (Py_ssize_t)(n)))
+
+#if defined(Py_DEBUG) && defined(WITH_PYMALLOC)
+#define Py_USING_MEMORY_DEBUGGER
+PyAPI_FUNC(int) _PyMem_InRange(void *p);
+#endif
+
+PyAPI_FUNC(PyObject *)    _PxObject_Init(PyObject *op, PyTypeObject *tp);
+PyAPI_FUNC(PyVarObject *) _PxObject_InitVar(PyVarObject *op,
+                                            PyTypeObject *tp,
+                                            Py_ssize_t s);
+
+PyAPI_FUNC(PyObject *)    _PxObject_New(PyTypeObject *tp);
+PyAPI_FUNC(PyVarObject *) _PxObject_NewVar(PyTypeObject *op, Py_ssize_t s);
+PyAPI_FUNC(PyVarObject *) _PxObject_Resize(PyVarObject *op, Py_ssize_t s);
+
+PyAPI_FUNC(void) _Px_NewReference(PyObject *op);
+PyAPI_FUNC(void) _Px_ForgetReference(PyObject *op);
 
 #define _PyObject_SIZE(typeobj) ( (typeobj)->tp_basicsize )
 
@@ -185,14 +228,7 @@ PyAPI_FUNC(PyVarObject *) _PyObject_NewVar(PyTypeObject *, Py_ssize_t);
         (nitems)*(typeobj)->tp_itemsize,        \
         SIZEOF_VOID_P)
 
-#define PyObject_NEW(type, typeobj) \
-( (type *) PyObject_Init( \
-    (PyObject *) PyObject_MALLOC( _PyObject_SIZE(typeobj) ), (typeobj)) )
-
-#define PyObject_NEW_VAR(type, typeobj, n) \
-( (type *) PyObject_InitVar( \
-      (PyVarObject *) PyObject_MALLOC(_PyObject_VAR_SIZE((typeobj),(n)) ),\
-      (typeobj), (n)) )
+PyAPI_FUNC(PyObject *) PyVarObject_Copy(PyObject *);
 
 /* This example code implements an object constructor with a custom
    allocator, where PyObject_New is inlined, and shows the important
@@ -230,17 +266,22 @@ PyAPI_FUNC(PyVarObject *) _PyObject_NewVar(PyTypeObject *, Py_ssize_t);
 /* C equivalent of gc.collect(). */
 PyAPI_FUNC(Py_ssize_t) PyGC_Collect(void);
 
-/* Test if a type has a GC head */
-#define PyType_IS_GC(t) PyType_HasFeature((t), Py_TPFLAGS_HAVE_GC)
-
-/* Test if an object has a GC head */
-#define PyObject_IS_GC(o) (PyType_IS_GC(Py_TYPE(o)) && \
-    (Py_TYPE(o)->tp_is_gc == NULL || Py_TYPE(o)->tp_is_gc(o)))
-
 PyAPI_FUNC(PyVarObject *) _PyObject_GC_Resize(PyVarObject *, Py_ssize_t);
+
 #define PyObject_GC_Resize(type, op, n) \
                 ( (type *) _PyObject_GC_Resize((PyVarObject *)(op), (n)) )
 
+#define _PyObject_GC_RESIZE(type, op, n) \
+                ( (type *) _PyObject_GC_Resize((PyVarObject *)(op), (n)) )
+
+/* Test if a type has a GC head */
+PyAPI_FUNC(int) PyType_Is_GC(PyTypeObject *t);
+#define PyType_IS_GC(t) (PyType_Is_GC((PyTypeObject *)t))
+
+/* Test if an object has a GC head */
+PyAPI_FUNC(int) PyObject_Is_GC(PyObject *o);
+#define PyObject_IS_GC(o) (PyObject_Is_GC((PyObject *)o))
+
 /* GC information is stored BEFORE the object structure. */
 #ifndef Py_LIMITED_API
 typedef union _gc_head {
@@ -252,63 +293,44 @@ typedef union _gc_head {
     long double dummy;  /* force worst-case alignment */
 } PyGC_Head;
 
-extern PyGC_Head *_PyGC_generation0;
+PyAPI_FUNC(PyGC_Head *) _Py_As_GC(PyObject *o);
+#define _Py_AS_GC(o) (_Py_As_GC((PyObject *)o))
 
-#define _Py_AS_GC(o) ((PyGC_Head *)(o)-1)
+PyAPI_FUNC(PyObject *) _Py_From_GC(PyGC_Head *);
+#define _Py_FROM_GC(h) (_Py_From_GC((PyGC_Head *)h))
 
 #define _PyGC_REFS_UNTRACKED                    (-2)
 #define _PyGC_REFS_REACHABLE                    (-3)
 #define _PyGC_REFS_TENTATIVELY_UNREACHABLE      (-4)
 
-/* Tell the GC to track this object.  NB: While the object is tracked the
- * collector it must be safe to call the ob_traverse method. */
-#define _PyObject_GC_TRACK(o) do { \
-    PyGC_Head *g = _Py_AS_GC(o); \
-    if (g->gc.gc_refs != _PyGC_REFS_UNTRACKED) \
-        Py_FatalError("GC object already tracked"); \
-    g->gc.gc_refs = _PyGC_REFS_REACHABLE; \
-    g->gc.gc_next = _PyGC_generation0; \
-    g->gc.gc_prev = _PyGC_generation0->gc.gc_prev; \
-    g->gc.gc_prev->gc.gc_next = g; \
-    _PyGC_generation0->gc.gc_prev = g; \
-    } while (0);
-
-/* Tell the GC to stop tracking this object.
- * gc_next doesn't need to be set to NULL, but doing so is a good
- * way to provoke memory errors if calling code is confused.
- */
-#define _PyObject_GC_UNTRACK(o) do { \
-    PyGC_Head *g = _Py_AS_GC(o); \
-    assert(g->gc.gc_refs != _PyGC_REFS_UNTRACKED); \
-    g->gc.gc_refs = _PyGC_REFS_UNTRACKED; \
-    g->gc.gc_prev->gc.gc_next = g->gc.gc_next; \
-    g->gc.gc_next->gc.gc_prev = g->gc.gc_prev; \
-    g->gc.gc_next = NULL; \
-    } while (0);
-
 /* True if the object is currently tracked by the GC. */
+PyAPI_FUNC(int) _PyObject_GC_IsTracked(PyObject *);
 #define _PyObject_GC_IS_TRACKED(o) \
-    ((_Py_AS_GC(o))->gc.gc_refs != _PyGC_REFS_UNTRACKED)
+    (_PyObject_GC_IsTracked((PyObject *)(o)))
 
 /* True if the object may be tracked by the GC in the future, or already is.
    This can be useful to implement some optimizations. */
-#define _PyObject_GC_MAY_BE_TRACKED(obj) \
-    (PyObject_IS_GC(obj) && \
-        (!PyTuple_CheckExact(obj) || _PyObject_GC_IS_TRACKED(obj)))
+PyAPI_FUNC(int) _PyObject_GC_MayBeTracked(PyObject *o);
+#define _PyObject_GC_MAY_BE_TRACKED(o) \
+    (_PyObject_GC_MayBeTracked((PyObject *)o))
+
 #endif /* Py_LIMITED_API */
 
 PyAPI_FUNC(PyObject *) _PyObject_GC_Malloc(size_t);
 PyAPI_FUNC(PyObject *) _PyObject_GC_New(PyTypeObject *);
 PyAPI_FUNC(PyVarObject *) _PyObject_GC_NewVar(PyTypeObject *, Py_ssize_t);
-PyAPI_FUNC(void) PyObject_GC_Track(void *);
-PyAPI_FUNC(void) PyObject_GC_UnTrack(void *);
-PyAPI_FUNC(void) PyObject_GC_Del(void *);
 
 #define PyObject_GC_New(type, typeobj)                             \
                 ( (type *) _PyObject_GC_New(typeobj) )
 #define PyObject_GC_NewVar(type, typeobj, n)                       \
                 ( (type *) _PyObject_GC_NewVar((typeobj), (n)) )
 
+PyAPI_FUNC(void) PyObject_GC_Track(void *);
+PyAPI_FUNC(void) PyObject_GC_UnTrack(void *);
+PyAPI_FUNC(void) PyObject_GC_Del(void *);
+
+#define _PyObject_GC_TRACK(o) (PyObject_GC_Track(o))
+#define _PyObject_GC_UNTRACK(o) (PyObject_GC_UnTrack(o))
 
 /* Utility macro to help write tp_traverse functions.
  * To use this macro, the tp_traverse function must name its arguments
@@ -317,6 +339,7 @@ PyAPI_FUNC(void) PyObject_GC_Del(void *);
  */
 #define Py_VISIT(op)                                                    \
     do {                                                                \
+        Py_GUARD();                                                     \
         if (op) {                                                       \
             int vret = visit((PyObject *)(op), arg);                    \
             if (vret)                                                   \
