diff --git a/Include/pymem.h b/Include/pymem.h
index 10b5bea..56f4725 100644
--- a/Include/pymem.h
+++ b/Include/pymem.h
@@ -53,15 +53,31 @@ PyAPI_FUNC(void *) PyMem_Malloc(size_t);
 PyAPI_FUNC(void *) PyMem_Realloc(void *, size_t);
 PyAPI_FUNC(void)   PyMem_Free(void *);
 
+PyAPI_FUNC(void *) PyMem_RawMalloc(size_t);
+PyAPI_FUNC(void *) PyMem_RawRealloc(void *, size_t);
+PyAPI_FUNC(void *) PyMem_RawCalloc(size_t size, size_t elsize);
+PyAPI_FUNC(void)   PyMem_RawFree(void *);
+
+PyAPI_FUNC(void *) PyMem_RawAlignedMalloc(size_t size, size_t alignment);
+PyAPI_FUNC(void *) PyMem_RawAlignedCalloc(size_t size, size_t elsize, size_t);
+PyAPI_FUNC(void *) PyMem_RawAlignedRealloc(void *, size_t, size_t alignment);
+PyAPI_FUNC(void)   PyMem_RawAlignedFree(void *);
+
+#ifdef WITH_PARALLEL
+PyAPI_FUNC(void *) _PxMem_Malloc(size_t);
+PyAPI_FUNC(void *) _PxMem_Realloc(void *, size_t);
+PyAPI_FUNC(void)   _PxMem_Free(void *);
+#endif
+
 /* Starting from Python 1.6, the wrappers Py_{Malloc,Realloc,Free} are
    no longer supported. They used to call PyErr_NoMemory() on failure. */
 
 /* Macros. */
 #ifdef PYMALLOC_DEBUG
 /* Redirect all memory operations to Python's debugging allocator. */
-#define PyMem_MALLOC		_PyMem_DebugMalloc
-#define PyMem_REALLOC		_PyMem_DebugRealloc
-#define PyMem_FREE		_PyMem_DebugFree
+#define _PyMem_MALLOC		_PyMem_DebugMalloc
+#define _PyMem_REALLOC		_PyMem_DebugRealloc
+#define _PyMem_FREE		_PyMem_DebugFree
 
 #else	/* ! PYMALLOC_DEBUG */
 
@@ -71,14 +87,33 @@ PyAPI_FUNC(void) PyMem_Free(void *);
    pymalloc. To solve these problems, allocate an extra byte. */
 /* Returns NULL to indicate error if a negative size or size larger than
    Py_ssize_t can represent is supplied.  Helps prevents security holes. */
-#define PyMem_MALLOC(n)		((size_t)(n) > (size_t)PY_SSIZE_T_MAX ? NULL \
+#define _PyMem_MALLOC(n)	((size_t)(n) > (size_t)PY_SSIZE_T_MAX ? NULL \
 				: malloc((n) ? (n) : 1))
-#define PyMem_REALLOC(p, n)	((size_t)(n) > (size_t)PY_SSIZE_T_MAX  ? NULL \
+#define _PyMem_REALLOC(p, n)	((size_t)(n) > (size_t)PY_SSIZE_T_MAX  ? NULL \
 				: realloc((p), (n) ? (n) : 1))
-#define PyMem_FREE		free
+#define _PyMem_FREE		free
 
 #endif	/* PYMALLOC_DEBUG */
 
+
+#ifdef WITH_PARALLEL
+#define PyMem_MALLOC(n) \
+    (Py_PXCTX() ? _PxMem_Malloc((size_t)n) : _PyMem_MALLOC((size_t)n))
+
+#define PyMem_CALLOC(n, z)                                  \
+    (Py_PXCTX() ? _PxMem_Calloc((size_t)(n), (size_t)(z)) : \
+                  _PyMem_CALLOC((size_t)(n), (size_t)(z)))
+
+#define PyMem_REALLOC(p, n) \
+    (Py_PXCTX() ? _PxMem_Realloc((p), (n)) : _PyMem_REALLOC((p), (n)))
+
+#define PyMem_FREE(p) (Py_PXCTX() ? _PxMem_Free((p)) : _PyMem_FREE(p))
+#else
+#define PyMem_MALLOC  _PyMem_MALLOC
+#define PyMem_REALLOC _PyMem_REALLOC
+#define PyMem_FREE    _PyMem_FREE
+#endif
+
 /*
  * Type-oriented memory interface
  * ==============================
