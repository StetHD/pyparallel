diff --git a/Tools/msi/msi.py b/Tools/msi/msi.py
index 5ed025d..bfabd36 100644
--- a/Tools/msi/msi.py
+++ b/Tools/msi/msi.py
@@ -1,3 +1,11 @@
+# NOTE: this needs to be run with a Visual Studio 2010 x86 command prompt and
+# a x86 Python 2.7 installation with pywin32 installed.  Run via:
+#   C:\Users\Trent\Home\src\pyparallel\Tools\msi>C:\Python27\python.exe msi.py
+# xxx: and it also appears you need to run it first from an x64 prompt so that
+# the msisupport.dll will build properly as x64, but then re-run as x86 to
+# actually build the installer.  (The installer bombs out when run as x64 as
+# it can't find a registry key, or something.  Haven't investigated in detail.)
+
 # Python MSI Generator
 # (C) 2003 Martin v. Loewis
 # See "FOO" in comments refers to MSDN sections with the title FOO.
@@ -31,7 +39,10 @@ MSVCR = "100"
 # Name of certificate in default store to sign MSI with
 certname = None
 # Make a zip file containing the PDB files for this build?
-pdbzip = True
+# (PyParallel: we set this to false as we inline all our pdbs in the .msi.)
+pdbzip = False
+# Run zip -0 <msiname>.zip <msiname> after msi is built.
+zipmsi = True
 
 try:
     from config import *
@@ -58,12 +69,25 @@ for l in lines:
     if name == 'PY_MINOR_VERSION': minor = value
     if name == 'PY_MICRO_VERSION': micro = value
     if name == 'PY_RELEASE_LEVEL': level = levels[value]
-    if name == 'PY_RELEASE_SERIAL': serial = value
 
 short_version = major+"."+minor
+
+serial_header = srcdir + '/Include/serial.h'
+
+def load_serial():
+    with open(serial_header, 'r') as f:
+        return f.read().replace('#define PY_RELEASE_SERIAL', '').strip()
+
+def update_serial():
+    serial = str(int(load_serial())+1)
+    with open(serial_header, 'w') as f:
+        f.write(' '.join(('#define PY_RELEASE_SERIAL ', serial)))
+
+serial = load_serial()
+
 # See PC/make_versioninfo.c
-FIELD3 = 1000*int(micro) + 10*level + int(serial)
-current_version = "%s.%d" % (short_version, FIELD3)
+#FIELD3 = 1000*int(micro) + 10*level + int(serial)
+current_version = "%s.%s" % (short_version, serial)
 
 # This should never change. The UpgradeCode of this package can be
 # used in the Upgrade table of future packages to make the future
@@ -74,13 +98,16 @@ upgrade_code_snapshot='{92A24481-3ECB-40FC-8836-04B7966EC0D5}'
 upgrade_code='{65E6DE48-A358-434D-AA4F-4AF72DB4718F}'
 upgrade_code_64='{6A965A0C-6EE6-4E3A-9983-3263F56311EC}'
 
-if snapshot:
-    current_version = "%s.%s.%s" % (major, minor, int(time.time()/3600/24))
+#if snapshot:
+#    current_version = "%s.%s.%s" % (major, minor, int(time.time()/3600/24))
 
 if full_current_version is None:
     full_current_version = current_version
 
 extensions = [
+    'pyodbc.pyd',
+    'pxodbc.pyd',
+    'datrie.pyd',
     'pyexpat.pyd',
     'select.pyd',
     'unicodedata.pyd',
@@ -130,6 +157,17 @@ if level < 0xf:
         docfile += '%x%s' % (level, serial)
 docfile = 'python%s%s%s.chm' % (major, minor, docfile)
 
+from os.path import (
+    join,
+    exists,
+    dirname,
+    abspath,
+    normpath,
+)
+
+def join_path(*args):
+    return abspath(normpath(join(*args)))
+
 # Build the mingw import library, libpythonXY.a
 # This requires 'nm' and 'dlltool' executables on your PATH
 def build_mingw_lib(lib_file, def_file, dll_file, mingw_lib):
@@ -186,6 +224,9 @@ if msilib.pe_type(dll_path) != msilib.pe_type("msisupport.dll"):
 
 if msilib.Win64:
     upgrade_code = upgrade_code_64
+    bits = 64
+else:
+    bits = 32
 
 if snapshot:
     product_code = msilib.gen_uuid()
@@ -232,13 +273,13 @@ def build_database():
     # schema represents the installer 2.0 database schema.
     # sequence is the set of standard sequences
     # (ui/execute, admin/advt/install)
-    msiname = "python-%s%s.msi" % (full_current_version, msilib.arch_ext)
+    msiname = "pyparallel-%s%s.msi" % (full_current_version, msilib.arch_ext)
     db = msilib.init_database(msiname,
-                  schema, ProductName="Python "+full_current_version+productsuffix,
+                  schema, ProductName="PyParallel "+full_current_version+productsuffix,
                   ProductCode=product_code,
                   ProductVersion=current_version,
-                  Manufacturer=u"Python Software Foundation",
-                  request_uac = True)
+                  Manufacturer=u"Trent Nelson",
+                  request_uac = False)
     # The default sequencing of the RemoveExistingProducts action causes
     # removal of files that got just installed. Place it after
     # InstallInitialize, so we first uninstall everything, but still roll
@@ -253,7 +294,7 @@ def build_database():
     # accordingly.
     add_data(db, "Property", [("UpgradeCode", uc),
                               ("WhichUsers", "ALL"),
-                              ("ProductLine", "Python%s%s" % (major, minor)),
+                              ("ProductLine", "PyParallel%s%s" % (major, minor)),
                              ])
     db.Commit()
     return db, msiname
@@ -286,7 +327,7 @@ def remove_old_versions(db):
               None, migrate_features, None, "REMOVEOLDSNAPSHOT")])
         props = "REMOVEOLDSNAPSHOT;REMOVEOLDVERSION"
 
-    props += ";TARGETDIR;DLLDIR;LAUNCHERDIR"
+    props += ";TARGETDIR;DLLDIR;LAUNCHERDIR;CONFDIR"
     # Installer collects the product codes of the earlier releases in
     # these properties. In order to allow modification of the properties,
     # they must be declared as secure. See "SecureCustomProperties Property"
@@ -409,10 +450,10 @@ def add_ui(db):
 
     # Fonts, see "TextStyle Table"
     add_data(db, "TextStyle",
-             [("DlgFont8", "Tahoma", 9, None, 0),
-              ("DlgFontBold8", "Tahoma", 8, None, 1), #bold
-              ("VerdanaBold10", "Verdana", 10, None, 1),
-              ("VerdanaRed9", "Verdana", 9, 255, 0),
+             [("DlgFont8", "Segoe UI", 9, None, 0),
+              ("DlgFontBold8", "Segoe UI", 8, None, 1), #bold
+              ("VerdanaBold10", "Segoe UI", 10, None, 1),
+              ("VerdanaRed9", "Segoe UI", 9, 255, 0),
              ])
 
     compileargs = r'-Wi "[TARGETDIR]Lib\compileall.py" -f -x "bad_coding|badsyntax|site-packages|py2_|lib2to3\\tests|venv\\scripts" "[TARGETDIR]Lib"'
@@ -423,7 +464,7 @@ def add_ui(db):
         # See "Custom Action Type 51",
         # "Custom Action Execution Scheduling Options"
         ("InitialTargetDir", 307, "TARGETDIR",
-         "[WindowsVolume]Python%s%s" % (major, minor)),
+         "[WindowsVolume]PyParallel%s%s" % (major, minor)),
         ("SetDLLDirToTarget", 307, "DLLDIR", "[TARGETDIR]"),
         ("SetDLLDirToSystem32", 307, "DLLDIR", SystemFolderName),
         ("SetLauncherDirToTarget", 307, "LAUNCHERDIR", "[TARGETDIR]"),
@@ -846,6 +887,7 @@ def add_features(db):
     # Features that have no advertisement trigger (e.g. the test suite)
     # must not support advertisement
     global default_feature, tcltk, htmlfiles, tools, testsuite, ext_feature, private_crt, prepend_path
+    global source
     default_feature = Feature(db, "DefaultFeature", "Python",
                               "Python Interpreter and Libraries",
                               1, directory = "TARGETDIR")
@@ -858,17 +900,23 @@ def add_features(db):
     # We don't support advertisement of extensions
     ext_feature = Feature(db, "Extensions", "Register Extensions",
                           "Make this Python installation the default Python installation", 3,
-                         parent = default_feature, attributes=2|8)
+                         parent = default_feature, attributes=2|8,
+                         # PyParallel: don't register as default Python.
+                         level=2)
+    source = Feature(db, "Source", "Source",
+                     "Include all source code required to build and modify PyParallel", 5,
+                     parent=default_feature,
+                     attributes=2|8)
     if have_tcl:
-        tcltk = Feature(db, "TclTk", "Tcl/Tk", "Tkinter, IDLE, pydoc", 5,
+        tcltk = Feature(db, "TclTk", "Tcl/Tk", "Tkinter, IDLE, pydoc", 7,
                     parent = default_feature, attributes=2)
     htmlfiles = Feature(db, "Documentation", "Documentation",
-                        "Python HTMLHelp File", 7, parent = default_feature)
+                        "Python HTMLHelp File", 9, parent = default_feature)
     tools = Feature(db, "Tools", "Utility Scripts",
-                    "Python utility scripts (Tools/)", 9,
+                    "Python utility scripts (Tools/)", 11,
                     parent = default_feature, attributes=2)
     testsuite = Feature(db, "Testsuite", "Test suite",
-                        "Python test suite (Lib/test/)", 11,
+                        "Python test suite (Lib/test/)", 13,
                         parent = default_feature, attributes=2|8)
     # prepend_path is an additional feature which is to be off by default.
     # Since the default level for the above features is 1, this needs to be
@@ -876,7 +924,7 @@ def add_features(db):
     prepend_path = Feature(db, "PrependPath", "Add python.exe to Path",
                         "Prepend [TARGETDIR] to the system Path variable. "
                         "This allows you to type 'python' into a command "
-                        "prompt without needing the full path.", 13,
+                        "prompt without needing the full path.", 15,
                         parent = default_feature, attributes=2|8,
                         level=2)
 
@@ -905,9 +953,10 @@ def generate_license():
     shutil.copyfileobj(open("crtlicense.txt"), out)
     for name, pat, file in (("bzip2","bzip2-*", "LICENSE"),
                       ("openssl", "openssl-*", "LICENSE"),
-                      ("Tcl", "tcl8*", "license.terms"),
-                      ("Tk", "tk8*", "license.terms"),
-                      ("Tix", "tix-*", "license.terms")):
+                      ("Tcl", "tcl-8*", "license.terms"),
+                      ("Tk", "tk-8*", "license.terms"),
+                      #("Tix", "tix-*", "license.terms")
+                      ):
         out.write("\nThis copy of Python includes a copy of %s, which is licensed under the following terms:\n\n" % name)
         dirs = glob.glob(srcdir+"/../"+pat)
         if not dirs:
@@ -927,6 +976,68 @@ class PyDirectory(Directory):
             kw['componentflags'] = 2 #msidbComponentAttributesOptional
         Directory.__init__(self, *args, **kw)
 
+    def add_file(self, *args, **kw):
+        # We always include .pdb files for PyParallel, 'cause it's gonna'
+        # crash sooner or later.
+        Directory.add_file(self, *args, **kw)
+        filename = args[0]
+        ix = filename.rfind('.')
+        if ix == -1:
+            return
+        ext = filename[ix+1:]
+
+        if ext not in ('pyd', 'dll', 'exe'):
+            return
+
+        if 'Visual Studio' in kw.get('src', ''):
+            return
+
+        if filename.startswith('wininst'):
+            return
+
+        if filename == 'python3.dll':
+            return
+
+        if filename.startswith(('tcl', 'tk')):
+            return
+
+        pdbname = '.'.join((filename[:ix], 'pdb'))
+        pdbpath = os.path.join(srcdir, pdbname)
+
+        if not exists(pdbpath):
+            pdbpath = join_path(self.absolute, pdbname)
+
+        if 'numpy' in pdbpath:
+            return
+
+        if 'debugger' in pdbpath:
+            return
+
+        if filename.startswith(('dbghelp', 'dbgeng')):
+            return
+
+        if 'setuptools' in pdbpath:
+            return
+
+        if 'python_icon' in pdbpath:
+            return
+
+        print "%s -> %s" % (filename, pdbname)
+        if not exists(pdbpath):
+            import pdb
+            dbg = pdb.Pdb()
+            print("If you see this breakpoint, an .exe or .dll file has been "
+                  "found, but no corresponding .pdb file can be found; this "
+                  "could be an error, and the .pdb should exist, or, as in "
+                  "most cases, there's no corresponding .pdb, so you can just "
+                  "edit this file (Tools/msi.py) and add an exclusion stmt "
+                  "above (many examples ~10 lines up).\n\n"
+                  "Next steps: try `print pdbpath`")
+            dbg.set_trace()
+
+        Directory.add_file(self, pdbname, **kw)
+
+
 def hgmanifest():
     # Fetch file list from Mercurial
     process = subprocess.Popen(['hg', 'manifest'], stdout=subprocess.PIPE)
@@ -943,21 +1054,80 @@ def hgmanifest():
         d[components[0]] = None
     return result
 
+def gitmanifest():
+    # Lazy copy & paste of git environment initialization code from
+    # Lib/px/commands.py.
+    from os.path import (
+        join,
+        abspath,
+        normpath,
+    )
+    def join_path(*args):
+        return abspath(normpath(join(*args)))
+
+    git_root = 'c:\\msysgit'
+    git_bin = join_path(git_root, 'bin')
+    mingw_bin = join_path(git_root, 'mingw/bin')
+    git_cmd = join_path(git_root, 'cmd')
+
+    prepend_path = ';'.join((
+        git_bin,
+        mingw_bin,
+        git_cmd,
+    ))
+
+    existing_path = os.environ['PATH']
+    new_path = ';'.join((prepend_path, existing_path))
+    os.environ['PATH'] = new_path
+    os.environ['PLINK_PROTOCOL'] = 'ssh'
+    os.environ['TERM'] = 'msys'
+
+    cwd = os.getcwd()
+    os.chdir('../..')
+    cmd = 'git ls > Tools/msi/manifest.txt'
+    os.system(cmd)
+    os.chdir(cwd)
+    with open('manifest.txt', 'r') as f:
+        lines = f.readlines()
+
+    # Create nested directories for file tree
+    result = {}
+    for line in lines:
+        # -1 = remove trailing \n
+        components = line[:-1].split('/')
+        d = result
+        while len(components) > 1:
+            d1 = d.setdefault(components[0], {})
+            d = d1
+            del components[0]
+        d[components[0]] = None
+
+    return result
+
+def manifest():
+    return gitmanifest()
 
 # See "File Table", "Component Table", "Directory Table",
 # "FeatureComponents Table"
 def add_files(db):
     installer = msilib.MakeInstaller()
-    hgfiles = hgmanifest()
-    cab = CAB("python")
+    files = manifest()
+    cab = CAB("pyparallel")
     tmpfiles = []
     # Add all executables, icons, text files into the TARGETDIR component
     root = PyDirectory(db, cab, None, srcdir, "TARGETDIR", "SourceDir")
     default_feature.set_current()
     if not msilib.Win64:
         root.add_file("%s/w9xpopen.exe" % PCBUILD)
-    root.add_file("README.txt", src="README")
+    root.add_file("README.txt", src="README.original")
     root.add_file("NEWS.txt", src="Misc/NEWS")
+    root.add_file("px.bat", src="Tools/pyparallel/px.bat")
+    root.add_file("tefb.bat", src="Tools/pyparallel/tefb.bat")
+    root.add_file("px-http-server.bat", src="Tools/pyparallel/px-http-server.bat")
+    root.add_file("python33-http-server.bat", src="Tools/pyparallel/python33-http-server.bat")
+    #root.add_file("debugger.exe", src="debugger.exe")
+    #root.add_file("dbghelp.dll", src="dbghelp.dll")
+    #root.add_file("dbgeng.dll", src="dbgeng.dll")
     generate_license()
     root.add_file("LICENSE.txt", src=os.path.abspath("LICENSE.txt"))
     root.start_component("python.exe", keyfile="python.exe")
@@ -965,6 +1135,14 @@ def add_files(db):
     root.start_component("pythonw.exe", keyfile="pythonw.exe")
     root.add_file("%s/pythonw.exe" % PCBUILD)
 
+    # Include pyparallel.c and pyparallel_private.h in the top level directory;
+    # helpful when python.exe crashes, you launch JIT debugging with VS, which
+    # you'll then need to point at pyparallel.c.
+    root.add_file("pyparallel.c",
+                  src=os.path.abspath("../../Python/pyparallel.c"))
+    root.add_file("pyparallel_private.h",
+                  src=os.path.abspath("../../Python/pyparallel_private.h"))
+
     # msidbComponentAttributesSharedDllRefCount = 8, see "Component Table"
     dlldir = PyDirectory(db, cab, root, srcdir, "DLLDIR", ".")
     launcherdir = PyDirectory(db, cab, root, srcdir, "LAUNCHERDIR", ".")
@@ -977,6 +1155,8 @@ def add_files(db):
     launchersrc = PCBUILD
     if launchersrc.lower() == 'pcbuild\\x64-pgo':
         launchersrc = 'PCBuild\\win32-pgo'
+        if not os.path.isfile(os.path.join(srcdir, launchersrc, "py.exe")):
+            launchersrc = 'PCbuild'
     if launchersrc.lower() == 'pcbuild\\amd64':
         launchersrc = 'PCBuild'
     launcher = os.path.join(srcdir, launchersrc, "py.exe")
@@ -1028,9 +1208,28 @@ def add_files(db):
         print("WARNING: _ctypes.pyd not found, ctypes will not be included")
         extensions.remove("_ctypes.pyd")
 
+    # Add PyParallel conf\*.conf files.
+    trail = '%s|%s' % (root.make_short('conf'), 'conf')
+    conf = PyDirectory(db, cab, root, 'conf', 'conf', trail)
+    conf.add_file('px.conf')
+    conf.add_file('techempower_frameworks_benchmark.conf')
+
     # Add all .py files in Lib, except tkinter, test
     dirs = []
-    pydirs = [(root, "Lib", hgfiles["Lib"], default_feature)]
+    pydirs = [
+        (root, "Lib",       files["Lib"],      default_feature),
+        (root, "examples",  files["examples"], default_feature),
+        (root, "Python",    files["Python"],  source),
+        (root, "PCbuild",   files["PCbuild"], source),
+        (root, "PC",        files["PC"],      source),
+        (root, "diffs",     files["diffs"],   source),
+        (root, "Include",   files["Include"], source),
+        (root, "Grammar",   files["Grammar"], source),
+        (root, "Objects",   files["Objects"], source),
+        (root, "Modules",   files["Modules"], source),
+        (root, "Parser",    files["Parser"],  source),
+        (root, "contrib",   files["contrib"], source),
+    ]
     while pydirs:
         # Commit every now and then, or else installer will complain
         db.Commit()
@@ -1051,8 +1250,21 @@ def add_files(db):
         dirs.append(lib)
         has_py = False
         for name, subdir in files.items():
+            if name.startswith('.'):
+                continue
+            if '~' in name:
+                continue
             if subdir is None:
-                assert os.path.isfile(os.path.join(lib.absolute, name))
+                abs_name = os.path.join(lib.absolute, name)
+                if not os.path.isfile(abs_name):
+                    if name in ('sqlite3', 'pxodbc'):
+                        # These are both git submodules so they won't have
+                        # manifest entries.
+                        continue
+                    import pdb
+                    dbg = pdb.Pdb()
+                    dbg.set_trace()
+                    print("Error! %s is not a file" % abs_name)
                 if name == 'README':
                     lib.add_file("README.txt", src="README")
                 else:
@@ -1289,7 +1501,7 @@ def add_registry(db):
     # Shortcuts, see "Shortcut Table"
     add_data(db, "Directory",
              [("ProgramMenuFolder", "TARGETDIR", "."),
-              ("MenuDir", "ProgramMenuFolder", "PY%s%s|%sPython %s.%s" % (major,minor,testprefix,major,minor))])
+              ("MenuDir", "ProgramMenuFolder", "PY%s%s|%sPyParallel %s.%s (%d-bit)" % (major,minor,testprefix,major,minor,bits))])
     add_data(db, "RemoveFile",
              [("MenuDir", "TARGETDIR", None, "MenuDir", 2)])
     tcltkshortcuts = []
@@ -1322,7 +1534,7 @@ def add_registry(db):
 def build_pdbzip():
     pdbexclude = ['kill_python.pdb', 'make_buildinfo.pdb',
                   'make_versioninfo.pdb']
-    path = "python-%s%s-pdb.zip" % (full_current_version, msilib.arch_ext)
+    path = "pyparallel-%s%s-pdb.zip" % (full_current_version, msilib.arch_ext)
     pdbzip = zipfile.ZipFile(path, 'w')
     for f in glob.glob1(os.path.join(srcdir, PCBUILD), "*.pdb"):
         if f not in pdbexclude and not f.endswith('_d.pdb'):
@@ -1417,3 +1629,12 @@ if certname:
 
 if pdbzip:
     build_pdbzip()
+
+if zipmsi:
+    cmd = 'zip -0 %s.zip %s' % (msiname, msiname)
+    print 'Running: %s' % cmd
+    os.system(cmd)
+
+#update_serial()
+
+# vim:set tw=0:
